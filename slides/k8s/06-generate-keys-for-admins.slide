Generate credentials for kubectl
|| Last update: 9 Oct 2018

* Tested on

- 1.7.x
- 1.9.x
- 1.12.x

* Generate a new private key

The first step is to generate a new RSA private key for your user:

    # As sudo on the controller box
    sudo su

    USERNAME=${1:-'user'}
    GROUP=${2:-'system:masters'} # Admin!

    # Generate random key
    openssl genrsa -out "$USERNAME.key" 2048

- [[https://www.openssl.org/docs/man1.0.2/apps/genrsa.html]]

* Generate a certificate signing request

Create a certificate signing request:

    openssl req -new \
      -key "$USERNAME.key" \
      -out "$USERNAME.csr" \
      -subj "/CN=$USERNAME/O=$GROUP"

- [[https://www.openssl.org/docs/manmaster/man1/req.html]]
- [[https://support.rackspace.com/how-to/generate-a-csr-with-openssl/]]

* Generate signed certificate

Create a self signed certificate using existing CSR and private key:

    openssl x509 -req \
      -in "$USERNAME.csr" \
      -CA /etc/kubernetes/pki/ca.crt \
      -CAkey /etc/kubernetes/pki/ca.key \
      -CAcreateserial \
      -out "$USERNAME.crt" -days 10000

* Write the base64 on a file for you to download

For example on a simple txt file:

    touch /opt/$USERNAME.data
    echo "CA CRT:" > /opt/$USERNAME.data
    base64 -w0 ca.crt >> /opt/$USERNAME.data
    echo "" >> /opt/$USERNAME.data
    echo "$USERNAME CRT:" >> /opt/$USERNAME.data
    base64 -w0 $USERNAME.crt >> /opt/$USERNAME.data
    echo "" >> /opt/$USERNAME.data
    echo "$USERNAME KEY:" >> /opt/$USERNAME.data
    base64 -w0 $USERNAME.key >> /opt/$USERNAME.data
    echo "" >> /opt/$USERNAME.data

* Configure the config file

For example on file called _kube.conf_:

    apiVersion: v1
    clusters:
    - cluster:
        certificate-authority-data: <CA CRT base64 here>
        server: https://<controller ip/dns>:6443
      name: kubernetes
    contexts:
    - context:
        cluster: kubernetes
        #namespace: testing
        user: jecnua
      name: jecnua@kubernetes
    current-context: jecnua@kubernetes
    kind: Config
    preferences: {}
    users:
    - name: jecnua
      user:
        client-certificate-data: <USER CRT base64 here>
        client-key-data: <USER KEY base64 here>

* Then export and try to connect

    export KUBECONFIG=kube.conf
    kubectl get nodes

* Working example

You can find a script to do all of this for you and the terrform to spin a new
test cluster here:

- [[https://github.com/jecnua/terraform-aws-kubernetes]]

To be specific here:

- [[https://github.com/jecnua/terraform-aws-kubernetes/tree/master/utilities]]

* Use a different group (optional)

In case you want to use another group:

    kind: ClusterRoleBinding
    apiVersion: rbac.authorization.k8s.io/v1beta1
    metadata:
      name: my-admins
    subjects:
    - kind: Group
      name: admin
      apiGroup: rbac.authorization.k8s.io
    roleRef:
      kind: ClusterRole
      name: cluster-admin
      apiGroup: rbac.authorization.k8s.io

* Re/Sources

- [[https://lukemarsden.github.io/docs/admin/authorization/][admin/authorization/]]
- [[https://kubernetes.io/docs/admin/authentication/#x509-client-certs][authentication/#x509-client-certs]]
- [[https://kubernetes.io/docs/admin/authorization/rbac/#user-facing-roles][rbac/#user-facing-roles]]
- [[https://kubernetes.io/docs/admin/authorization/rbac/#kubectl-create-rolebinding][rbac/#kubectl-create-rolebinding]]
- [[https://github.com/kubernetes/dashboard/blob/master/docs/design/access-control.md][dashboard: access-control]]
- [[https://github.com/kubernetes/kubernetes/blob/master/plugin/pkg/auth/authorizer/rbac/bootstrappolicy/testdata/cluster-roles.yaml][rbac/bootstrappolicy/testdata/cluster-roles.yaml]]
- [[https://github.com/janwillies/kubernetes-rbac-howto][https://github.com/janwillies/kubernetes-rbac-howto]]
