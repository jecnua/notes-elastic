CKA notes
|| Last update: 22 Oct 2018

* To clarify

- k8s ports
- cgroup drivers
- no need for cni package

* Kubernetes course: CKA certified kubernetes administrator

* Intro

.image images/k8s_high_level.png
.caption Source: [[https://www.safaribooksonline.com/videos/oscon-2017/][Kubernetes hands-on - Kelsey Hightower (Google) - Part 1]]

* The physical cluster

** Nodes memory

Kubernetes controller and node servers are expected to have *swap*disabled*.
This is the recommended deployment. If swap is not disabled, kubelet service
will not start on the masters and nodes.

Kubernetes requires the swap to be off! To disable it on a node you can do:

    # As root
    swapoff -a

and then remove it from the _/etc/fstab_ file.

You could disable it by passing --fail-swap-on=false but is not adviced.

    The kubelet now fails if swap is enabled on a node. To override the default
    and run with /proc/swaps on, set --fail-swap-on=false. The experimental
    flag --experimental-fail-swap-on is deprecated in this release, and will be
    removed in a future release.
    Source: https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG-1.8.md#before-upgrading

- [[https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet/]]
- [[https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG-1.8.md#before-upgrading]]
- [[https://kubernetes.io/docs/setup/independent/]]
- [[https://github.com/kubernetes/kubernetes/issues/53533]]

** Nodes components

Nodes will require three services:

- a container runtime
- the kubelet
- kube-proxy
- (beta) cloud controller manager

*** Node health

*kube-controller-manager* assign CIDR blocks to a new node, keep track of the
nodes health and check with the cloud provider is the node is still there.

After 40s it will go in condition unknown if the healthbeat fails. After 5m it
will evict pods. It will check the status every few seconds. There is a flag
called:

    --node-monitor-period duration     Default: 5s
    The period for syncing NodeStatus in NodeController.
    Source: https://kubernetes.io/docs/reference/command-line-tools-reference/kube-controller-manager/

It will also check what percentage of nodes in that zone is unhealty.
There is an unhealthy zone threshold and there are rules for each AZ.

    --unhealthy-zone-threshold float32     Default: 0.55
      Fraction of Nodes in a zone which needs to be not Ready (minimum 3)
      for zone to be treated as unhealthy.

The eviction rate is parametric. 0.1 per second means that no more than one pod
per node every 10s.

    --node-eviction-rate float32     Default: 0.1
      Number of nodes per second on which pods are deleted in case of node
      failure when a zone is healthy (see --unhealthy-zone-threshold for
      definition of healthy/unhealthy). Zone refers to entire cluster in
      non-multizone clusters.

The eviction rate is *reduced* to the secondary node.

    --secondary-node-eviction-rate float32     Default: 0.01
      Number of nodes per second on which pods are deleted in case of node failure
      when a zone is unhealthy (see --unhealthy-zone-threshold for definition of
      healthy/unhealthy). Zone refers to entire cluster in non-multizone clusters.
      This value is implicitly overridden to 0 if the cluster size is smaller
      than --large-cluster-size-threshold.

- [[https://kubernetes.io/docs/concepts/architecture/nodes/]]

*** (BETA) Cloud controller manager

NEEDS MORE RESOURCES

- [[https://kubernetes.io/docs/tasks/administer-cluster/running-cloud-controller/]]

Deamon that manages cloud related resources in a control loop.
It can implement:

- Node controller: Updated the nodes status by coordinating with the cloud API.
- Service controller: Listen to service create, udpate and delete and responsible for LoadBalancer types
- Route controller: Responsible for setting up network routes (only on gce)
- Persistent volume labels controller: Sets zone and region labels on PersistenVolumes

To run this beta functionality you will however need to:

- NOT specify the --cloud-provider flag in kube-apiserver and kube-controller-manaher
- Run kubelet with the flag --cloud-provider=external
- The kube-apiserver should not run the PersistentVolumeLabel admission controller
- Set the correct InitializerConfiguration to label persistent volumes

** Network

Kubernetes made some interesting choices on how networking should be implemented.
It defines the network model but leaves it to third party plugins a way to
implement it.

Each pod can communicate to each other pod on any host of the cluster, without
a NAT.

** CNI

- [[https://github.com/containernetworking/cni]]

    CNI (Container Network Interface), a Cloud Native Computing Foundation
    project, consists of a specification and libraries for writing plugins
    to configure network interfaces in Linux containers, along with a number
    of supported plugins. CNI concerns itself only with network connectivity of
    containers and removing allocated resources when the container is deleted.
    Because of this focus, CNI has a wide range of support and the specification
    is simple to implement.
    Source: https://github.com/containernetworking/cni

A CNI plugin is an *executable* invoked by the container management system. It's
responsible for:

- Inserting the network interface (one end of a vETH pair) in the container network namespace
- Making changes to the host: like attaching the other end of the vETH pair to the bridge network
- Assign the IP, put up the routes and apply IPAM rules depending on your topology

You can choose the right plugin for your workload.

** CNI plugins

- [[https://github.com/projectcalico/calico-cni]]
- [[https://github.com/weaveworks/weave]]

*** Flannel

When you configure flannel you will need to pass the CIDR block your k8s cluster
will need to use and assign it to the nodes.

You can define this CIDR with:

    --pod-network-cidr=10.244.0.0/16

- [[https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/]]

* Kubernetes nuts and bolts

** Communication

When you use kubectl, the command converts the information from yaml to json
when making the API request.

** Objects

Kubernetes objects are _persistent_entities_ in the k8s system. They represent
the state of the cluster. Any of them have at least the two following
nested object fields:

- object *spec*: This is your configuration defining the *desired* state. We provide it to k8s.
- object *status*: This section is added by kubernetes. It is supplied and updated by the control plane and represent the *actual* state.

k8s reacts to the _difference_ between state and status.

The _metadata_ is what uniquely identify a resource. All objects have unique:

- name: client, max 253 char, alphanumeric lower case, you can use - and .
- UID: generated by the control plane, spatially and temporary unique

- [[https://kubernetes.io/docs/concepts/overview/working-with-objects/kubernetes-objects/]]

* Kinds

** Namespace

Namespaces can be seen as virtual clusters. Provides a scope for names (names of
resources need to be unique within a namespace but not across) and allow
to divide the cluster in subsets of resources (*resource*quotas*). All objects
in the same namespace shares the access control policies.

By default you have three namespaces:

- default: Is a catch-all namespace for all objects that do not specify one.
- kube-system: Reserved to objects created by the kubernetes system.
- kube-public: Readable by all users even the non-authenticated.

The namespace is also part of the DNS name that will be created with a service.
When you try to do a dns resolution of a service with just the name, it will
resolve in the _local_ namespace.

    <service>

If you want to cross namespace you will need
to specify it.

    <service>.<namespace>

- [[https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/]]

** Config map

Decouples the configuration from the app

* Re/Sources (not already referenced)

- [[https://linuxacademy.com/linux/training/course/name/certified-kubernetes-administrator-preparation-course]]
- [[https://www.safaribooksonline.com/videos/oscon-2017/][Kubernetes hands-on - Kelsey Hightower (Google) - Part 1]]
