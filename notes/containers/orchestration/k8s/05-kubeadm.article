Kubeadm (OBSOLETE)
|| Last update: 25 Jul 2019 || kubeadm 1.15.0

* Intro

BEWARE: Is better to install kubelet of the same version of k8s you want to
install with kubeadm or you could have this error:

from v 1.15 kubeadm control plane flag - still require lb pre-provisioners.
inside kubeamd you
put the control plane how it can be found. then add the upload cert flags. both
nodes can be joined in any order. kubeamd automatic certificate copying. if not
external dns, creates an etcd member in each control plane node. stack
configuration file. also make it upgradable.  you can also upgrade.

* kubeamd config file - BETA 1.15

Set of yaml. Alternative to command line flags.
Use of external ETCD
utilizing kube proxy
ext

It can be used any moment after the installation too (like the upgrade).

** Control plane in HA - BETA 1.15

Dynamic HA clusters can easily be created with the kubeadm tool using exactly
the same kubeadm init and kubeadm join commands the users are familiar with,
the only difference that you have to pass the --control-plane flag.

    sudo kubeadm init --config=kubeadm-config.yaml \
      --upload-certs

################################################################################
################################################################################
################################################################################

* Usage

Kubeadm will deploy:

- kube-apiserver
- kube-controller-manager
- kube-scheduler

It also by default run etcd in containers on the crontoller node.

.image images/kubernetes-arch.png _ 400
.caption Source: [[https://www.ianlewis.org/en/how-kubeadm-initializes-your-kubernetes-master][https://www.ianlewis.org/en/how-kubeadm-initializes-your-kubernetes-master]]

kublet will be run under systemd and it will manage the other 3 components
(+ etcd).

    ps aux | grep /usr/bin/kubelet | grep -v grep

By default:

    /usr/bin/kubelet \
      --kubeconfig=/etc/kubernetes/kubelet.conf \
      --require-kubeconfig=true \
      --pod-manifest-path=/etc/kubernetes/manifests \
      --allow-privileged=true \
      --network-plugin=cni \
      --cni-conf-dir=/etc/cni/net.d \
      --cni-bin-dir=/opt/cni/bin \
      --cluster-dns=10.96.0.10 \
      --cluster-domain=cluster.local

By default the master is tagged not to be schedulable with workload.

* Configuration

The confs are hosted in /etc/kubernetes/manifests/

    # ls -la /etc/kubernetes/manifests/
    total 24
    drwxr-xr-x 2 root root 4096 Dec 23 10:41 .
    drwxr-xr-x 4 root root 4096 Dec 23 10:41 ..
    -rw------- 1 root root 1786 Dec 23 10:41 etcd.json
    -rw------- 1 root root 2245 Dec 23 10:41 kube-apiserver.json
    -rw------- 1 root root 1962 Dec 23 10:41 kube-controller-manager.json
    -rw------- 1 root root  969 Dec 23 10:41 kube-scheduler.json

The directory /etc/kubernetes/manifests/ will be monitor for changes!
The system will ensure all in that dir is always running.
For the docs:

    kubeadm generates Kubernetes resource manifests for the API server,
    controller manager and scheduler, and placing them in
    /etc/kubernetes/manifests. The kubelet watches this directory for static
    resources to create on startup. These are the core components of
    Kubernetes, and once they are up and running we can use kubectl to set
    up/manage any additional components.

To get all the containers running:

    docker ps --format="table {{.ID}}\t{{.Image}}"

They are also all listening on the machine ("hostNetwork": true):

    curl http://127.0.0.1:8080/version

The kublet systemd setting is here /etc/systemd/system/kubelet.service.d/10-kubeadm.conf

** Notes

At the time of this writing the docs are appalling:

- no way to know how to use cloud config
- no way how to use systemd drop pin

* Known problems

** ERROR: kubelet dir is not empty

While configuring a new node, I was receiving the following error:

    [preflight] Some fatal errors occurred:
    /var/lib/kubelet is not empty

As a temporary fix I added

    --skip-preflight-checks

So now the new join call is:

    kubeadm join \
    --skip-preflight-checks \
    --token=$CONTROLLER_JOIN_TOKEN $MASTER_IP

** ERROR: You need to pass the port

* Resources

- [[http://blog.kubernetes.io/2016/09/how-we-made-kubernetes-easy-to-install.html][Mark post about kubeadm]]
- [[http://kubernetes.io/docs/admin/kubeadm/][[kubeadm reference]]]
- [[https://github.com/kubernetes/kubeadm/blob/master/CHANGELOG.md][Github CHANGELOG]]
- [[https://github.com/kubernetes/kubeadm/issues][Github ISSUES]]
- [[http://kubernetes.io/docs/getting-started-guides/kubeadm/][Getting started guide]]
- [[http://kubernetes.io/docs/admin/kubeadm/][Kubeadm reference]]
- [[http://kubernetes.io/docs/getting-started-guides/kubeadm/#limitations][Limitations]]
- [[https://kubernetes.io/docs/tasks/administer-cluster/kubeadm-upgrade-1-7/][Upgrade from 1.6 to 1.7]]

** NOTES TO CLEAN

    │error execution phase preflight: [preflight] Some fatal errors occurred:
    │ [ERROR KubeletVersion]: the kubelet version is higher than the control plane version. This is
    │ not a supported version skew and may lead to a malfunctional cluster. Kubelet version: "1.13.0" Cont
    │rol plane version: "1.12.3"

    /var/lib/kubelet/kubeadm-flags.env

    KUBELET_KUBEADM_ARGS=--cgroup-driver=cgroupfs --network-plugin=cni --pod-infra-container-image=k8s.gcr.io/pause:3.1 --resolv-conf=/run/systemd/resolve/resolv.conf

    root@ip-10-0-11-44:/home/ubuntu# cat /var/lib/kubelet/config.yaml | grep staticPod
    staticPodPath: /etc/kubernetes/manifests
    root@ip-10-0-11-44:/home/ubuntu# ls -la /etc/kubernetes/manifests
    total 24
    drwxr-xr-x 2 root root 4096 Dec 11 15:41 .
    drwxr-xr-x 4 root root 4096 Dec 11 15:41 ..
    -rw------- 1 root root 2029 Dec 11 15:41 etcd.yaml
    -rw------- 1 root root 3182 Dec 11 15:41 kube-apiserver.yaml
    -rw------- 1 root root 2964 Dec 11 15:41 kube-controller-manager.yaml
    -rw------- 1 root root 1051 Dec 11 15:41 kube-scheduler.yaml


    root@ip-10-0-11-44:/home/ubuntu# ls -la /etc/kubernetes/pki
    total 68
    drwxr-xr-x 3 root root 4096 Dec 11 15:41 .
    drwxr-xr-x 4 root root 4096 Dec 11 15:41 ..
    -rw-r--r-- 1 root root 1090 Dec 11 15:41 apiserver-etcd-client.crt
    -rw------- 1 root root 1679 Dec 11 15:41 apiserver-etcd-client.key
    -rw-r--r-- 1 root root 1099 Dec 11 15:41 apiserver-kubelet-client.crt
    -rw------- 1 root root 1679 Dec 11 15:41 apiserver-kubelet-client.key
    -rw-r--r-- 1 root root 1269 Dec 11 15:41 apiserver.crt
    -rw------- 1 root root 1675 Dec 11 15:41 apiserver.key
    -rw-r--r-- 1 root root 1025 Dec 11 15:41 ca.crt
    -rw------- 1 root root 1679 Dec 11 15:41 ca.key
    drwxr-xr-x 2 root root 4096 Dec 11 15:41 etcd
    -rw-r--r-- 1 root root 1038 Dec 11 15:41 front-proxy-ca.crt
    -rw------- 1 root root 1679 Dec 11 15:41 front-proxy-ca.key
    -rw-r--r-- 1 root root 1058 Dec 11 15:41 front-proxy-client.crt
    -rw------- 1 root root 1675 Dec 11 15:41 front-proxy-client.key
    -rw------- 1 root root 1679 Dec 11 15:41 sa.key
    -rw------- 1 root root  451 Dec 11 15:41 sa.pub

The flags:

    $ cat /var/lib/kubelet/kubeadm-flags.env
    KUBELET_KUBEADM_ARGS=--cgroup-driver=cgroupfs --network-plugin=cni --pod-infra-container-image=k8s.gcr.io/pause:3.1 --resolv-conf=/run/systemd/resolve/resolv.conf
