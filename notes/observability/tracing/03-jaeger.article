Jaeger
|| Last update: 2 May 2018

* Intro

- [[http://www.jaegertracing.io/]]
- [[https://github.com/uber/jaeger]]

It's written in GO (UI in react).
Being pretty new, it's build to be scalable and it's cloud friendy. The client
emits the traces to the _agent_ which listen to spans (inbound) and route them
to the collector.

* Architecture

- [[https://www.jaegertracing.io/docs/architecture/]]

.image images/jaeger_arch.png 500 _
.caption Souce: [[https://www.jaegertracing.io/docs/architecture/]]

** Agents

The agents receive the span over UDP (5775) and batches it, encode it and when
needed push it forward.

The agent *POLL* for a _sampling_strategy_, from the tracing backend and propagate
the rate. This is very useful in dynamic environments. It also abstract away the
discovery phase of the collectors.

They can accept Zipkin span :D

** Span

Fields are:

- traceID
- spanID
- parentSpanID
- operationName
- startTime (unix epoch)
- duration (millis)
- tags

** Storage

- In-memory
- Cassandra
- Elasticsearch
- ScyllaDB (in progress)

You can use Elasticsearch as storage by passing to the collector:

    --span-storage.type elasticsearch

* Query API

Expose a rest interface.

* Test it

- [[https://github.com/jaegertracing/jaeger/tree/master/examples/hotrod]]

    docker run -d --name jaeger --rm -p 6831:6831/udp -p 16686:16686 jaegertracing/all-in-one:latest
    docker run --rm -it --link jaeger -p8080-8083:8080-8083 jaegertracing/example-hotrod:latest --jaeger-agent.host-port=jaeger:6831

* Re/Sources

- [[https://sematext.com/blog/opentracing-zipkin-as-distributed-tracer/]]
