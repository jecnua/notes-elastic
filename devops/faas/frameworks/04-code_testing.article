AWS Lambda local testing
|| Last update: 14 Mar 2018

* intro

serverless with webpack and serverless-webpack
babel with some add-ons, mainly babel-preset-env
eslint with more add-ons, and prettier
aws-sdk and aws-sdk-mock


- http://babeljs.io/env


babel-preset-env with its babel-* related packages. By using the env preset you both gain in less configurations and less amount of code necessary after transpilations for a given target runtime platform. For example, delivering a bundle targeting node 6.x will be lighter than the one for earlier versions, because the runtime supports more features natively.

serverless-webpack with its webpack settings can further optimize functions when they are bundled individually. Also, a configuration for external resources make the bundled upload lighter, excluding dependencies to aws-sdk already available on AWS premises.

* Mocking AWS services

Mocking AWS services
Testing lambda functions with the assumption that they are just functions can take you long way if the logic inside these functions is relatively simple. However, the real reason for lambda functions to be, is that they are the glue between AWS services.

So, sooner or later you will have to find a way to mock AWS services in your tests :)

For us, the aws-sdk-mock package works well so far. It supports mocking constructors and nested methods, it can restore originals. Documentation and support seem mature.

Together with mocking AWS services, we also take examples for events from the official AWS documentation. These can serve as a fast-track to creating stubs for the event argument of a lambda function.

import AWS from "aws-sdk-mock";
import { promisify } from "util";
import lambda from "../src/upload";
import eventStub from "./stubs/eventHttpApiGateway.json";

const handler = promisify(lambda);

describe(`Service aws-node-singned-uploads: S3 mock for successful operations`, () => {
  beforeAll(() => {
    AWS.mock("S3", "getSignedUrl", (method, _, callback) => {
      callback(null, {
        data: "https://example.com"
      });
    });
  });

  afterEach(() => {
    delete process.env.BUCKET;
    delete process.env.REGION;
  });

  afterAll(() => {
    AWS.restore("S3");
  });

  test(`Replies back with a JSON for a signed upload on success`, () => {
    process.env.BUCKET = "foo";
    process.env.REGION = "bar";

    const event = eventStub;
    const context = {};

    const result = handler(event, context);
    expect(result).resolves.toMatchSnapshot();
  });
});
As you can see, the beforeAll life cycle setups the AWS S3 mock for the getSignedUrl method. afterEach environment variables are reset and afterAll the original S3 service is restored so that it operates to the AWS API after the test suite has finished.


* Resources

- https://kalinchernev.github.io/tdd-serverless-jest/
