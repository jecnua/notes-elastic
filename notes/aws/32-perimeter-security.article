AWS perimeter security - WAF, Shield and Firewall Manager
|| Last update: 9 Apr 2019

* Intro

- [[https://www.youtube.com/watch?v=ELIiF-jE0y8][AWS re:Invent 2018: Orchestrate Perimeter Security Across Distributed Applications (SEC326)]]

- WAF
- Shield (paid have for free WAF and firewall)
- Firewall Manager (centralise multiple account management and rules application)

* WAF

WAF is a web application firewall (application level protection) able to work on:

- API gateway
- Cloudfront
- ALB

It is able to respond with either requested content or 403 (forbidden) status
code (it can be configured).

There are three main behaviours:

- Allow all except specified
- Deny all except specified
- Count requests that match the specified rules (to test rules before applying them)

You can use WAF separately from Shield and other tools.

You use WAF by creating *conditions*, *rules* and *web*access*control*list* (web
ACLs).
You define conditions, combine conditions into rules and combine rules into ACL.

    Use global to create WAF resources that you would associate with CloudFront
    distributions and other regions for WAF resources that you would associate
    with ALBs and API Gateway stages in that region.
    Source: AWS interface

It can protect you from:

- Bad bot
- SQL injection
- Cross-site scripting (XSS)
- DDoS - SYN/UDP/ICMP/[[https://www.cloudflare.com/learning/ddos/http-flood-ddos-attack/][HTTP flood]]

** Conditions

The *conditions* define basic characteristic what you are looking for in the
web requests. You can use to create rules can be based on multiple elements:

- IP address or range (max 10k IPs or IP ranges) - Supports /8 or any range from /16 to /32 CIDR blocks for IPv4
- Country
- Request headers
- Specific string in requests that matches a regex
- Length
- SQL code (protect against SQL code injection)
- Script (protect against cross-site scripting)

Some conditions take multiple values.

If you add more than one condition to a rule, all condition must match for the
rule to apply.

** Rules

Rules are a combination of one or more conditions. There are two types of rules:

- Regular
- Rate based

When more than one condition is set, WAF will block only the one that will fit
*ALL* conditions (it's a logic AND).

*** Regular rules

You need at least one condition for regular rule (it's optional but makes no
sense to have an empty one).

*** Rate based rules

- [[https://aws.amazon.com/blogs/aws/protect-web-sites-services-using-rate-based-rules-for-aws-waf/]]
- [[https://docs.aws.amazon.com/waf/latest/developerguide/ddos-get-started-rate-based-rules.html]]

    AWS WAF provides HTTP flood protection that is a rate-based rule.
    The rate-based rule is automatically triggered when web requests from a
    client exceed a configurable threshold. The threshold is defined by the
    maximum number of incoming requests allowed from a single IP address within
    a five-minute period.
    After this threshold is breached, additional requests from the IP address
    are blocked until the request rate falls below the threshold. For this
    example, you defined 2000 requests as a threshold for the HTTP flood
    rate–based rule.
    Source: https://aws.amazon.com/blogs/compute/amazon-api-gateway-adds-support-for-aws-waf/

Rules can be applied with a *rate*limit*. This type of rules triggers an action
only if the set of _conditions_ exceeds the limit per data point (5 minutes).
Protect against DDoS attack.

    Rules that can allow, block, or count web requests that meet the specified
    conditions. Alternatively, rules can block or count web requests that not
    only meet the specified conditions, but also exceed a specified number of
    requests in any 5-minute period.
    Source: https://docs.aws.amazon.com/waf/latest/developerguide/what-is-aws-waf.html

Number of conditions are optional (0 or more). If not condition is set it will
apply to all requests and it will just rate limit per IPs (default).

The matched rules need to match some criteria and the rate is counted in 5
minutes intervals. By using this you can stop an application layer attach based
on volume.

- High volume low entropy
- High volume high entropy

Rate based rules only works with _high_volume_of_traffic_.

The lower for rate limit is *2000* (CHECK).

With rate it will block the connections until the 5 minutes passes and that rate
is no more firing.
If more than one condition is set in the rule, ALL (logical AND) needs to apply.

    If you add the rate limit rule multiple times, it effectively reduces the
    number of requests each time. Basically what happens is each time you add
    the rule, it counts an extra request for each IP. So say an IP makes a
    single request. If you have 2 rate limit rules applied, the request is
    counted twice. So basically, instead of 2000 requests, the IP only has to
    make 1000 before it gets blocked. If you add 3 rules, it will count each
    request 3 times - so the IP will be blocked at 667 requests.
    The other thing they clarified is that the "window" is 5 minutes, but if the
    total is breached anywhere in that window, it will be blocked. I thought the
    WAF would only evaluate the requests after a 5 minute period. So for example.
    Say you have a single rule for 2000 requests in 5 minutes. Say an IP makes
    2000 requests in the 1st minute, then only 10 requests after that for the
    next 4 minutes. I initially understood that the IP would only be blocked
    after minute 5 (because WAF evaluates a 5 minute window). But apparently,
    if the IP exceeds the limit anywhere in that window, it will be locked
    immediately. So if that IP makes 2000 requests in minute 1, it will actually
    be blocked from minute 2, 3, 4 and 5. But then will be allowed again from
    minute 6 onward.
    Source: https://www.reddit.com/r/aws/comments/9zuh7w/why_does_ip_rate_limiting_in_waf_have_a_minimum/ (support ticket?)


*IMPORTANT*: Rules that do not meet ALL conditions will not be counted towards
the rate limit and would not be blocked by the rule.

** Filters

Filters are transformations that reformats a web request before the WAF
inspect the request. It helps to eliminate unusual formatting the attacker
use in web requests in an effort to bypass the protection.

** Web ACL

- [[https://docs.aws.amazon.com/waf/latest/developerguide/web-acl.html]]

You combine rules into ACLs. You can use ACL in WAF. You can have multiple ACL
and each ACL have multiple rules (up to 10xACL). There are three types of actions:

- Allow
- Block
- Count

There is a default action for each rule (the default action can only Allow or
Block).

WAF compares a web request with the rules in an ACL in the order they are
defined. It will take the action of the *first* rule that the request matches.

You can associate only one webacl with a CloudFront distribution or an ALB.

Using count help here too. A rule that counts requests is affected by it's
position in the web ACL.

A default action is specified in case no rules in an ACL match and it can be
block or allow.

    On some occasions, AWS WAF might encounter an internal error that delays the
    response to API Gateway, CloudFront or an Application Load Balancer about
    whether to allow or block a request. On those occasions, API Gateway and
    CloudFhttps://i.imgur.com/pBBN44Y.pngront will typically will allow the request or serve the content. An
    Application Load Balancer typically will deny the request and not serve the
    content.
    Source: https://docs.aws.amazon.com/waf/latest/developerguide/how-aws-waf-works.html

A web acl can cover one or more distribution.

** Error pages

- [[https://docs.aws.amazon.com/waf/latest/developerguide/cloudfront-features.html#cloudfront-features-custom-error-pages]]

    When AWS WAF blocks a web request based on the conditions that you specify,
    it returns HTTP status code 403 (Forbidden) to CloudFront. Next, CloudFront
    returns that status code to the viewer.
    CloudFront can't distinguish between an HTTP status code 403 that is returned
    by your origin and one that is returned by AWS WAF when a request is blocked.
    This means that you can't return different custom error pages based on the
    different causes of an HTTP status code 403.
    Source: https://docs.aws.amazon.com/waf/latest/developerguide/cloudfront-features.html#cloudfront-features-custom-error-pages

** XSS and SQL injection problems

- [[https://www.reddit.com/r/aws/comments/b0tuy9/waf_xsssqlinj_unuseable_crazy_high_number_of/]]
- [[https://i.imgur.com/pBBN44Y.png]]
- [[https://i.imgur.com/8jr31LD.png]]

A lot of false positive.

** SSL traffic

    Yes, it's necessary for a Web Application Firewall (WAF) to have access to the decrypted traffic because a WAF, in general, has to inspect (among other things) the HTTP headers, HTTP request body, URI query strings, etc. which can't be done on encrypted traffic.
    This is why AWS' WAF product can only be deployed on services such as CloudFront, API Gateway, or an Application Load Balancer where the SSL/TLS is managed by AWS.
    So—for example—if you use an Application Load Balancer, a secure HTTPS connection is formed between the end user and the load balancer and the SSL/TLS encryption terminates at the load balancer. Then AWS runs the (now decrypted) traffic through the WAF before sending it to the designated target (e.g. your application server). Backend encryption (between the load balancer and the target) is also supported whereby the traffic is encrypted again as it exits the load balancer (after running through the WAF).
    CHECK
    Source: https://www.reddit.com/r/aws/comments/ay709e/does_waf_decrypt_traffic/

** Logs and ElasticSearch

- [[https://docs.aws.amazon.com/waf/latest/developerguide/logging.html]]
- [[https://aws.amazon.com/about-aws/whats-new/2018/08/aws-waf-launches-new-comprehensive-logging-functionality/]]
- [[https://aws.amazon.com/blogs/security/how-to-analyze-aws-waf-logs-using-amazon-elasticsearch-service/]]
- [[https://www.youtube.com/watch?v=Zrnro4ohXdA][Enhanced Security Analytics Using AWS WAF Full Logging]] - 24 Sep 2018

WAF logs contain the time a web request was recieved, information about the
request and the action that was taken.

    Important
    Do not choose Kinesis stream as your source.
    One AWS WAF log is equivalent to one Kinesis Data Firehose record. If you
    typically receive 10,000 requests per second and you enable full logs, you
    should have a 10,000 records per second limit in Kinesis Data Firehose. If
    you don't configure Kinesis Data Firehose correctly, AWS WAF won't record
    all logs.
    Source: https://docs.aws.amazon.com/waf/latest/developerguide/logging.html

To get the log you will need to use FireHose. FireHose will recieve data from
WAF and put it in a destination of choice.
The name *needs* to start with *aws-waf-logs-*.

WAF logs HTTP headers and the rule(s) that were triggered, but not the HTTP
request body is logged. Sensitive information present in the headers or request
URI may show up in the logs though. If this is a concern, you can REDACT them.

      COGNITO
      amazon cognito authentication for kibana
      user pool
      and you can create users
      you can create a federated identity
      and that is what allows an application and will pass an user authentication
      through cognito

      create a stream for each account
      you can send them to firehose
      firehose delivery stream
      IAM role for kinesis to deliver the logs and copy from s3
      you can get only failures or all messages
      buffer???

      WAF logs are accessible even for the non paid version
      and when you pay they can do it for you. ooooh so difficult -.-

** Monitoring

It’s nice to monitor # of blocked vs. allowed requests over time, per individual rule and totals.

Metrics are available only in US East (N. Virginia). You can view the data of
the last hour or preceding 3h.

** Rules and Dynamic adaptation

- [[https://aws.amazon.com/solutions/aws-waf-security-automations/]]

A pattern AWS pushes for is having CloudFront writing access files in a bucket
and having a lambda trigger every time a new file is created. This lambda
can find IPs that are causing a lot of errors or trying to access specific
endpoint with malicious intent.

The lambda can create or update an existing rule to add this IPs to a block
ACL (temporary or permanently).

** Existing patterns

*** AWS WAF security automations template

- [[https://aws.amazon.com/solutions/aws-waf-security-automations/]]
- [[https://docs.aws.amazon.com/solutions/latest/aws-waf-security-automations/welcome.html]]
- [[https://github.com/awslabs/aws-waf-security-automations]]

NOTE: v2.2

What it can do for you:

- Simple rate limiting again http flood from one IP (only rate limited rule in all the template)
- It can blacklist know endpoints from these three reputation lists: spamhaus, torproject, and emergingthreats
- You CAN whitelist IPs by adding something external (the stack will just create empty IPSets)
- Protect from SQL injection
- Protect from Xss attacks (could lead to false positives)
- Bot protection will work only with added logic. You will need to add a link in the website you think a scraper is hitting accessible only by scrapers (no other incoming link). This link will need to point to an API gateway
- Scanners Probes Protection (check every time a new CF file is put on s3) works by reading CloudFront logs and searching for abuses. It is implemented but I am not sure about the performance on a site as big as the mirror. I found at least one Issue on github speaking about performance issues with that.

What this template CAN’T do for you:

- Protect you from an http flood attack from multiple IPs if a single IP do not reach the 2000req/5min rate.
- Protect you from an http flood from multiple IPs even if they have the same user agent.

For the log parser consider [[https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/AccessLogs.html#access-logs-timing]]
It will also check if any ip generates too many (env variable) errors.

    The log parser only take action when access log files are delivered to S3.
    [...]
    Lastly, please note that rate-based rules aggregates data per 5 minutes
    period and the log parser does it by per minute.
    Source: https://github.com/awslabs/aws-waf-security-automations/issues/56#issuecomment-408125032

LIMITATIONS

- S3 bucket needs to be in the same region on the cloudformation template
- Only one deployment per region can use the same s3 bucket (the bucket will be modified to trigger a lambda)

    The solution will modify the bucket’s notification configuration to trigger
    the Log Parser AWS Lambda function whenever a new log file is saved in this
    bucket.
    Source: https://docs.aws.amazon.com/solutions/latest/aws-waf-security-automations/deployment.html

*** AWS WAF embargoed countries ofac

- [[https://aws.amazon.com/blogs/security/how-to-use-aws-waf-to-filter-incoming-traffic-from-embargoed-countries/]]
- [[https://github.com/aws-samples/aws-waf-embargoed-countries-ofac]]

*** OWASP template

- [[https://d0.awsstatic.com/whitepapers/Security/aws-waf-owasp.pdf]]

** Test WAF ACL

To test an ACL configure all rules to _count_ and set default action to _allow_.

*** Artillery

- [[https://artillery.io/]]
- [[https://aws.amazon.com/blogs/compute/amazon-api-gateway-adds-support-for-aws-waf/]]

    artillery quick -n 2000 --count 10 INVOKE_URL/pets

* Shield

- [[https://aws.amazon.com/shield/]]

Protect against DDoS attacks. There are two tiers:

- standard (default): available to all users for free (automatic)
- advanced: higher level visibility and protection. COver also EC2, CloudFront, ELB and route53.

Works on:

- EC2
- LB
- CF
- Route53 zone
- Global accelerator

** Shield standard

Available to everybody at no extra cost. It protects you from:

- SYN/ACK floods
- UDP Reflection
- Reflection attacks
- HTTP slow reads

and others.

    It improves mitigation using AWS's proprietary BlackWatch systems. AWS Shield
    Standard uses several techniques like deterministic packet filtering, and
    priority based traffic shaping to automatically mitigate attacks without
    impacting your applications.
    Source: https://datacenterrookie.wordpress.com/2017/01/11/shield-your-apps-from-ddos-attacks/

This protection is applied automatically and transparently.
Protects only at network and transport layer (3/4).
You have no cloudwatch metrics nor information on what it's doing.

** Shield advanced

Provides additional DDoS mitigation capability for volumetric attacks,
intelligent attack detection, and mitigation for attacks at the application &
network layers (so also layer 7).

It protects you from:

- DNS query flood
- HTTP flood/cache-busting (layer 7)

You can protect also EIPs.

You get 24×7 access to the DDoS Response Team (DRT) for custom
mitigation during attacks, advanced real time metrics and reports, and DDoS cost
protection to guard against bill spikes after a DDoS attack.

- Deploys ACL at the border
- Cloudwatch metrics (max 2 week retention) <--- move them somewhere else
- Detailed report and attack notification (you will get notifications for both layer 3/4/7)
- Global threat environment dashboard: It's just a fancy dashboard to all the attach and reaction they took in the x amount of time on AWS

To recieve notifications you will need to create a CloudWatch SNS topic in each
region.

Advanced give a 'point and protect' wizard.
Creates rules based on normal traffic and looking at your traffic (baseline).

It also offers protection from economic expenses of an attack.

If you pay for shield advanced you get WAF and AWS firewall manager at no
additional cost.

It can scan for all the resources (GUI) and it shows them to you and you can
click them to say protect resources.
It will tells if you want to add an ACL to the resource.

It will ask you if you want to create a cloudwatch alarm to write to an SNS
topic. You can use lambda to notify everywhere.

Current incident bump up to the top on the gui.

Shield Advanced is able to put protection at AWS edge and not inside your VPC
also for resources that are internal like EIP.
Is able to promote network ACL at the border where it can manage more traffic.

- [[https://docs.aws.amazon.com/waf/latest/developerguide/monitoring-cloudwatch.html]]

Vectors:

- ACKFlood
- ChargenReflection
- DNSReflection
- GenericUDPReflection
- MemcachedReflection
- MSSQLReflection
- NetBIOSReflection
- NTPReflection
- PortMapper
- RequestFlood
- RIPReflection
- SNMPReflection
- SSDPReflection
- SYNFlood
- UDPFragment
- UDPTraffic
- UDSReflection

*** DDoS response team (DRT)

- [[https://docs.aws.amazon.com/waf/latest/developerguide/ddos-overview.html#ddos-drt]]
- [[https://s3.amazonaws.com/aws-shield-lambda/ShieldEngagementLambda.pdf]]
- [[https://s3.amazonaws.com/aws-shield-lambda/ShieldEngagementLambda.js]]

Is a 24x7 incident response mechanism and escalation.
In the dashboard there will be a button that says ENGAGE with DRT (not
present otherwise).

You will need to give read-write access to the WAF and choose an existing role
for the DRT. You can pre-choose an s3 bucket to give the DRT access with all
your logs.

Sometimes people use the DRT like an ambulance so if they can react fast.
To engage with them automatically you can use a lambda function to bypass
the 15m SLA of the ticket.

It will create a support ticket for you.
It will actually page the DDoS person in support in AWS.
For DDoS things escalate to DRT. They are on call with (5m SLA and 24/7).
The DRT operator will join the call and speak with you to mitigate.

NOTE: If you are not enterprise don't put URGENT!

    13 engagement out of the total
    6 were erroneous
    rest for the most part where legacy stuff
    Source: Conference

Before you page them you need to be sure:

- Do you have the right people in the call?
- Are you prepared to make changes?
- If the fix is an architectural change can you do this?
- What is my application health?
- Can you run smoke test, distributed performance test, etc?
- How do we know if we are clear?

It would be good to have a runbook with three columns.
The problem, the solution and who is responsible for that?
Like if you need to change the route53 who can do it.

    For layer 3 and layer 4 attacks, AWS provides automatic attack detection and
    proactively applies mitigations on your behalf. For layer 7 DDoS attacks,
    AWS attempts to detect and notify AWS Shield Advanced customers through
    CloudWatch alarms, but does not apply mitigations proactively. This is to
    avoid inadvertently dropping valid user traffic.
    Source: https://docs.aws.amazon.com/waf/latest/developerguide/ddos-overview.html#ddos-drt

* Firewall manager

Simplify the management of rules in all the accounts of your organization.

An AWS organization can create global firewall rules. It will
automatically discover new resources, if you add new account and so on.
This allow compliance everywhere.
A single account will be able to manipulate others.

Allows:

- Rapid response to internet attacks
- Single console
- Quickly apply CVE patches and so on


==============================================================================
==============================================================================
==============================================================================
==============================================================================
==============================================================================
==============================================================================
==============================================================================
==============================================================================
==============================================================================
==============================================================================
==============================================================================


balckwatch looks at the header
and drops the most suspicion package first
for games for example
like UDP
header are not useful, so they need to look better
and they need to drop only the ones that have a pattern?

mitigation runbook for supporting AWS properties
automation which reduce time to respond
switft mitigation in attach

is not a team of people, is a service that engages for DDoS
when anomalies are notified
internal customers are the AWS services
automation around

receiving signals from Shield services

there are internal services
called lookout
net flow telemetry and from log
it works with this internal services
to recognise that

another is called *blackwatches"
packet filters array
edge boxes have this
transit centres have them
and they enga**

they enough packets so that the client
can maintain service
go give you overhead

they want drop all the packages only some of them
to allow you to scale and not me DDoS

full automated workflow
you can get this metrics only from shield advanced

** Type of engagement (PAID)

pre-emptive

- DDoS architecture review
- custom mitigation templates

blakwatch is a tool to day 'hey, protect this'
when shield detect the attack
and the template calibrates to the target
like the size of the machine about how much you can manage

if you need to use static ip
you can't use cname
so you can't use cloudfront
you can create a custom mitigation template for that cases
and this one take PRECEDENCE over the default one
plus you can decide things knowing the application of the client
speking with them

- operational readiness inquiry (priori to IEM infrastructure event manager)

ADVANCED COUNTERMEASURES

BGP traffic engineering
communicates what routes are available and you can
send announcement. leaking a route and shift it to another. like move the traffic
directed in japane to america and move part of the traffic

custom BlackWatch mitigations (depending on the application)
- pattern matching
- geo-shaping
- NACLs
look for pattern in the traffic and set different threshold.

AWS WAF rules
- log parsing
like to find botnet ips

architecture GAPs analysis
- is more personal and manual

example of pattern matching
like for games and udp
they would up a pattern in in the package
and is less dangerous to make it on the wire (???)
they can put some iptable roles
and move it from the ??? to ???
WAF can bake the rule in the WAF
"if they have this pattern drop it"
CHECK FOR MORE

** STEPS to use shield advanced

some steps are the same some only with advanced:

1) shield is a registration service. it associates arns with workflow
but if you don't tell which arns they won't do
they monitor networking and application layers
you can register

- ALL LB
- cloudfront
- route53
- EIP

2) use cloudfront and route53 over an LB. IPV6 is not supported.

it maintains 2 network. the zones and external traffic 9route53 and cloudfront
160 hop
*black watches* is online there
https/https
ere is deterministic

in the region everything goes so is more difficult

3) use WAF and rate-based rules to mitigate application attach

you can use WAF at any level
but if possible push it out
like it to the cloudfront
and not the LB
is better because it's easier to recognise it
having WAF on cloudfront can help stop before it reaches origin

4) monitor the cloudwatch alert for WAF (ONLY SHIELD ADVANCED)

attack detected (0 or 1) - simple to activate stuff
curve vector ???

TIP
if you use route53 healthcheck
you can correlate with WAF rules

5) engage with the DRT

if you have resource outside of AWS you can still cover them with CF
cloudfront is a sort of proxy
origin can be a website

you can associate CF with an ACL

customized security
custom rules (based on your traffic)
you can use pre-configured rules (on the marketplace, 3rd party)
monitoring (cloudwatch)
ability to pass log though 3rd party

create security automation
with lambda to react

WAF works with alb, cloudfront and api gateway

sql injection
xss  consition
marketplace rules

web traffic filtering

visibility and debugging

sampled logs
comprehensive logging (all of them???)

managed rules from the marketplace
you can pay and use them
pay as you go
pay and apply and you can apply to your web acl
you can pay and try and you can stop paying every time
vendors can cover different things

security automation?
you can run a CF template and can ???
take logs, run through lambda do analysis and change rules on the fly

there are a lot of options:

- bot protection
- etc

you can take the code and automate it

** guard duty

you can use a lamba to connect the WAF with guard duty
and if you find one ip attacking you
you can add it to the rule

* Q/A

** difference

you won't get the alarm, history or metrics
no economic protection
no WAF rules that goes with it

different in protection between standard and paid
is the rules and metrics

for example no bgp and so on

the automatic stuff is not there

for some particular attack
that is when you get the benefits of the paid one

london, frankfurt
to protect DDoS
put on us-east-1
go where the attacks are
you want more overhead

** why minimum is 2000?

you can't change the number of minutes 5
and the minimum is 2000

** how to get lower than 2000

use the same match condition
like /
then you can put than  everywhere
you can get all the way down to 20
???
CHECK

** rate page rules intelligence

now the focus just to reduce the number
no intelligence

** different rules and different pattern????

you can use a string match
limited regex support
you can put one rule to embrace multiple behaviour

can you package the rules in the same RBR

firewall manager????? you can do?????

there is a soft limit of 10 rules
you can have in a web ACL
there will be improvement with that too

** in the WAF logs there is a code why something was blocked

it does not give you any context
the WAF is not returning anything
is just a 403 forbidden from CF

there is no error code
is not build it

you need lambda at edge

they don't want to disclose to the client why you are??? rejecting???

WAF is not a proxy
is not an ???
WAF is a compute cell than lives on xxx
like elb or cloudfront
and respond to ??? with an ???
cloudfront and elb don't know why they just see the error

why? it needs to be fast
and? xxx

** some bot cycle

only some portion of the botnet attack you and cycle every couple of minutes or
so.

** There is IP reputation list

WAF by default has a few
but you can pull down grep list and add them
there is a lambda function for it.

you can use them for

- whitelist
- replication list ???
- blacklist

you can make a baseline with 6 rules of less

** shadow rules in waf

drt can superscribe waf customer to amazon.co.uk list
that they don't even know anything about
hashed
but they can use the list in waf
and they can give it to user

you can have cloudfront
with no caching
forward all
but do ssl termination
to get application acceleration

<somthing> sky defender
their waf
they have actively alerting towards lmt
-> they mitigate it
-> and they tell you what they did

is it possible to lift and shift stuff
you can't do the real stuff, just their name
they iterate over them
and got some of them turned off

ddos
over aggressively bots

* Resources

- PDF [[https://s3.amazonaws.com/solutions-reference/aws-waf-security-automations/latest/aws-waf-security-automations.pdf]]
- PDF [[https://d1.awsstatic.com/whitepapers/Security/DDoS_White_Paper.pdf]]
- [[https://docs.aws.amazon.com/waf/latest/developerguide/getting-started-ddos.html]]
- [[https://www.slideshare.net/AmazonWebServices/dow-jones-wall-street-journals-journey-to-manage-traffic-spikes-while-mitigating-ddos-application-layer-threats-ctd304-reinvent-2017]]
- [[https://aws.amazon.com/blogs/aws/prepare-for-the-owasp-top-10-web-application-vulnerabilities-using-aws-waf-and-our-new-white-paper/]]
- [[https://aws.amazon.com/solutions/aws-waf-security-automations/]]
- Talks and conferences
