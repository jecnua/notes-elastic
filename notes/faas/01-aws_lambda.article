AWS Lambda - OUTDATED
|| Last update: 21 Jan 2020

* Runtimes

- [[https://docs.aws.amazon.com/lambda/latest/dg/runtimes-custom.html]]
- [[https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html]]
- [[https://aws.amazon.com/lambda/partners/]]

You can use one of the supported languages or build your own runtime.

* Triggering

- [[https://docs.aws.amazon.com/elasticloadbalancing/latest/application/lambda-functions.html]]

You can now trigger a lambda from an ALB.

    You can register your Lambda functions as targets and configure a listener
    rule to forward requests to the target group for your Lambda function. When
    the load balancer forwards the request to a target group with a Lambda
    function as a target, it invokes your Lambda function and passes the content
    of the request to the Lambda function, in JSON format.
    Source: https://docs.aws.amazon.com/elasticloadbalancing/latest/application/lambda-functions.html

* Logging

    Whenever you write to the stdout from your Lambda function, it ends up in
    the function’s Log Group in CloudWatch Logs.
    To ship your logs from CloudWatch Logs to ELK you can subscribe the Log
    Group to a cloudwatch-logs-to-elk function that
    is responsible for shipping the logs. it’s better to setup a rule in
    CloudWatch Events to invoke a subscribe-log-group
    Lambda function to set up the subscription for new Log Groups.
    2 things to keep in mind:
    lots services create logs in CloudWatch Logs, so you’d want to filter Log
    Groups by name, Lambda function logs have the
    prefix /aws/lambda/ don’t subscribe the Log Group for the cloudwatch-logs-to-elk
    function (or whatever you decide to
    call it), otherwise you create an infinite loop for the cloudwatch-logs-to-elk
    function where its own logs will trigger itself and produce more logs and so on
    - https://theburningmonk.com/2017/03/yubls-road-to-serverless-architecture-part-3/

More:

    Another approach is to take a leaf from Datadog’s book and use special log messages and process them after the fact. For
    instance, if you write logs in the format MONITORING|epoch_timestamp|metric_value|metric_type|metric_name like below..
    console.log(“MONITORING|1489795335|27.4|latency|user-api-latency”);
    console.log(“MONITORING|1489795335|8|count|yubls-served”);
    then you can process these log messages (see Logging section above) and publish them as metrics instead. With this approach
    you’ll be trading off liveness of metrics for less API latency overhead.
    - https://theburningmonk.com/2017/03/yubls-road-to-serverless-architecture-part-3/

* Metrics

- [[https://www.datadoghq.com/blog/monitoring-lambda-functions-datadog/]]

    For functions on the critical path (that will directly impact the latency
    your users experience), choose the approach of publishing metrics as special
    log messages;
    For other functions (cron jobs, kinesis processors, etc.) where invocation
    duration doesn’t significantly impact a user’s experience, publish metrics as
    part of the invocation
    Source: ???

You can monitor and alert on lambda metrics on percentile (plus the usual
average, minimum and maximum).

* Tracing

- [[https://github.com/serverless/serverless/issues/3495]]

Additionally, you might wish to pass along other useful contextual information (such as payment ID, tournament ID, etc.) about the request to downstream services. Otherwise they would only appear in log messages from services where they originated from.

- x-ray
- tracing for telling startup time

turns it on by default and you can wrap certain calls

* External advices

** CPU is throttled via cgroups

You can verify that AWS Lambda uses cgroups for CPU throttling by reading the contents of the special file /proc/self/cgroup and see your function is assigned to specific control groups such as "2:cpu:/sandbox-root-UXXIp3/sandbox-023d01", but you cannot directly see the imposed limits.

- [[https://www.kernel.org/doc/Documentation/cgroup-v1/cgroups.txt][cgroup-v1]]

** Memory

We allocate more memory than we need for our functions. Spikes can cause out of memory exceptions. We prefer to allocate more memory instead of experiencing these errors in production. Second reason is, although you only specify the RAM, AWS allocates proportional CPU to your functions.

** Startup costs

Python has not startup cost but JVM has a startup costs.

** Dependencies

You can't use python wheel and egg to package python program. You need to use their own.

** Very noisy neighbours

Lambda share the same infra with a LOT of other functions.

* Asynch

- [[https://docs.aws.amazon.com/lambda/latest/dg/invocation-async.html]]
- [[https://aws.amazon.com/blogs/compute/new-aws-lambda-controls-for-stream-processing-and-asynchronous-invocations/]]

For Asynch invocations:

- Maximum Event Age

    When a function returns an error before execution, Lambda returns the event to
    the queue and attempts to run the function again for up to 6 hours by default.
    With Maximum Event Age, you can configure the lifetime of an event in the queue
    from 60 seconds to 6 hours. This allows you to remove any unwanted events based
    on the event age
    Source: https://aws.amazon.com/about-aws/whats-new/2019/11/aws-lambda-supports-max-retry-attempts-event-age-asynchronous-invocations/

- Maximum Retry Attempts

    When a function returns an error after execution, Lambda attempts to run it
    two more times by default. With Maximum Retry Attempts, you can customize
    the maximum number of retries from 0 to 2. This gives you the option to
    continue processing new events with fewer or no retries.
    Source: https://aws.amazon.com/about-aws/whats-new/2019/11/aws-lambda-supports-max-retry-attempts-event-age-asynchronous-invocations/

    When you invoke a function asynchronously, Lambda sends the event to a queue.
    A separate process reads events from the queue and runs your function. These
    two new features provide ways to control how events are retried and how long
    they can remain in the queue.
    [...]
    With these two features, events are discarded, or sent to a dead-letter queue
    and/or Lambda destinations when one of these two conditions is met: Retry
    Attempts reaches its maximum value, or Event Age reaches its maximum value.
    Source: https://aws.amazon.com/about-aws/whats-new/2019/11/aws-lambda-supports-max-retry-attempts-event-age-asynchronous-invocations/

You can also set up *destinations* for Asynch invocations that allows to gain
visibility to asynchronous invocation result and route the result to an AWS.

A function execution result includes version, timestamp, request context, request
payload, response context, and response payload. For each execution status (i.e.
Success and Failure), you can choose one destination from four options:

- Lambda function
- SNS topic
- SQS standard queue
- EventBridge.

* Synch or asynch

Some types of lambda are synch and some are asynch. If you want use functionality
of the asynch version (like dead letter queue) for the synch you can change one
in another. In python you can do it this way:

At the start of the lambda:

    def lambda_handler(event, context):
        """
        Your docs
        """
        if not event.get('async'):
            invoke_self_async(event, context)
            return

Then define the function:

    def invoke_self_async(event, context):
        """
        Have the Lambda invoke itself asynchronously, passing the same event it received originally,
        and tagging the event as 'async' so it's actually processed
        """
        event['async'] = True
        called_function = context.invoked_function_arn
        boto3.client('lambda').invoke(
            FunctionName=called_function,
            InvocationType='Event',
            Payload=bytes(json.dumps(event))
        )

* Specials for kinesis and dynamodb

** Failure Handling

AWS Lambda supports four failure-handling features for processing Kinesis
and DynamoDB streams: Bisect on Function Error, Maximum Record Age, Maximum
Retry Attempts, and Destination on Failure.

    Bisect on Function Error
    With Bisect on Function Error enabled, Lambda breaks the impacted batch of
    records into two when a function returns an error, and retries them
    separately. This allows you to easily separate the malformed data record
    from the rest of the batch, and process the rest of data records successfully.
    Maximum Record Age
    Your Lambda function can skip processing a data record when it has reached
    its Maximum Record Age, which can be configured from 60 seconds to 7 days.
    Maximum Retry Attempts
    Your Lambda function can skip retrying a batch of records when it has reached
    the Maximum Retry Attempts, which can be configured from 0 to 10,000.
    Source: https://aws.amazon.com/about-aws/whats-new/2019/11/aws-lambda-supports-failure-handling-features-for-kinesis-and-dynamodb-event-sources/

Destination on Failure
Now your Lambda function can continue processing a shard even when it returns an error. When a data record reaches the Maximum Retry Attempts or Maximum Record Age, you can send its metadata like shard ID and stream ARN to one of these two destinations for further investigation: an SQS queue or SNS topic.

** Parallelization factor

- [[https://docs.aws.amazon.com/lambda/latest/dg/with-kinesis.html]]

    Lambda supports Parallelization Factor that allows you to process one shard of
    a Kinesis or DynamoDB data stream with more than one Lambda invocation
    simultaneously.
    [...]
    By default, Lambda invokes a function with one batch of data records from one
    shard at a time. For a single event source mapping, the maximum number of
    concurrent Lambda invocations is equal to the number of Kinesis or DynamoDB shards.
    Source: https://aws.amazon.com/about-aws/whats-new/2019/11/aws-lambda-supports-parallelization-factor-for-kinesis-and-dynamodb-event-sources/

* Use it with terraform

Something like this:

- [[https://github.com/hashicorp/terraform/issues/8344#issuecomment-345807204]]

* Re/Sources

- [[https://theburningmonk.com/2017/03/yubls-road-to-serverless-architecture-part-3/]]
- [[https://aws.amazon.com/about-aws/whats-new/2018/10/aws-lambda-supports-functions-that-can-run-up-to-15-minutes/]]
