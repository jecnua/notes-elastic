ECR
|| Last update: 15 Nov 2019

* Intro

ECR is a very basic image repository for docker containers.

* Features

- [[https://aws.amazon.com/blogs/aws/eventbridge-support-in-amazon-elastic-container-registry/]]

Supports events.

* Image scanning

- [[https://docs.aws.amazon.com/AmazonECR/latest/userguide/image-scanning.html]]

    Image Scanning for Amazon ECR is available at no additional charge
    Source: https://aws.amazon.com/about-aws/whats-new/2019/10/announcing-image-scanning-for-amazon-ecr/

ECR now support image scanning.

    When scan on push is enabled, images are scanned after being pushed to a
    repository. If scan on push is disabled on a repository then you must
    manually start each image scan to get the scan results.
    Source: https://docs.aws.amazon.com/AmazonECR/latest/userguide/image-scanning.html

* Lack of cross region replication

ECR does not support cross region replication

- [[https://github.com/aws/containers-roadmap/issues/140]]

* Possible issues

** Debug problems with running docker behind a NAT

If you have ec2 servers inside a private subnet using a NAT gateway you may incur in a strange error.

You may have this error even if you can speak to the interenet.
Pulling from dockerhub works, same for pulling images from there.
IAM access works, as you may have access to che cli and query the repo.

        eval "$(aws ecr get-login --region=eu-west-1 --no-include-email)"

Actually, you will also see the layers!

        root@4a3b010c:/home/ubuntu# aws ecr list-images --repository-name xxx --region=eu-west-1
        {
            "imageIds": [
                {
                    "imageDigest": "sha256:xxx",
                    "imageTag": "latest"
                },
                {
                    "imageDigest": "sha256:xxx",
                    "imageTag": "jenkins_build_24"
                },
                {
                    "imageDigest": "sha256:xxx",
                    "imageTag": "jenkins_build_23"
                }
            ]
        }

But you will have this error:

        root@4a3b010c:/home/ubuntu# docker pull xxx.dkr.ecr.eu-west-1.amazonaws.com/xxx:jenkins_build_24
        jenkins_build_24: Pulling from xxx:jenkins_build_24
        7dc0dca2b151: Pulling fs layer
        a50481268b4a: Pulling fs layer
        f2b07ded3946: Waiting
        667f672695bc: Waiting
        cac067b95dd8: Waiting
        a9a49e0c3fb3: Waiting
        92213d9d6258: Waiting
        b89b85fc646e: Waiting

But it will be stuck THERE. At pulling. Until it gets into timeout!


        error pulling image configuration: Get
        https://prod-eu-west-1-starport-layer-bucket.s3.eu-west-1.amazonaws.com/xxx:
        dial tcp 52.218.84.34:443: i/o timeout

You will notice the issue if you use traceroute:

        # 52.218.16.188 is the aws ip aliased by prod-eu-west-1-starport-layer-bucket.s3.eu-west-1.amazonaws.com
        root@4a3b010c:/home/ubuntu# traceroute 52.218.16.188
        traceroute to 52.218.16.188 (52.218.16.188), 30 hops max, 60 byte packets
        1  ip-x-x-x-x.eu-west-1.compute.internal (x.x.x.x)  0.316 ms  0.299 ms  0.283 ms
        2  * * *
        3  * * *
        4  * * *
        5  * * *
        [...]

And so on.

When you see that error you may have a VPC s3 endpoint!

- [[https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/vpc-endpoints.html]]
- [[https://www.terraform.io/docs/providers/aws/r/vpc_endpoint_route_table_association.html]]


* Give developers access to ecs

** IAM user

Create new user with _AmazonEC2ContainerRegistryPowerUser_ policy.

.image images/ecs-policy.png _ 900

- create group with that policy
- create user with key/token

Save token/secret for later

** Install aws cli

[[https://aws.amazon.com/cli/][cli documentation]]

You can install it via brew:

    $ brew install awscli

or via python

    $ pip install awscli

** Add token/secret to personal config

If you already have a .aws/credential but no account
do this (region is us-east-1):

    [default]
    region = us-east-1
    aws_access_key_id = xxx
    aws_secret_access_key = xxx

otherwise:

    $ aws configure

will guide you through the configuration (token/secret when asked).

** Docker credential plugin for AWS

[[https://github.com/awslabs/amazon-ecr-credential-helper][Download]] the
docker credential plugin:

*** Compile and add on path

You can clone and compile and add the following executable
_docker-credential-ecr-login_ on your path
and make it executable:

    $ chmod 700 docker-credential-ecr-login

*** Credential helper config

- [[https://github.com/awslabs/amazon-ecr-credential-helper]]

It can be installed easily on both mac and linux.
After the installation, you need to change the config.

- [[https://aws.amazon.com/blogs/compute/authenticating-amazon-ecr-repositories-for-docker-cli-with-credential-helper/]]

    $ cat .docker/config.json
    {
    "auths": {
        "https://xxx.dkr.ecr.us-east-1.amazonaws.com": {
        },
        "https://index.docker.io/v1/": {
            "auth": "xxx"
        }
    },
        "credsStore": "ecr-login"
    }

*NOTE*: You will have this lines only if you also use Dockerhub:

    "https://index.docker.io/v1/": {
        "auth": "xxx"
    }

*** Test it

You can run the following

    $ mkdir -p /tmp/testecs
    $ cd /tmp/testecs
    $ echo "from alpine" > Dockerfile
    $ docker build -t testecs .
    $ docker tag testecs xxx.dkr.ecr.us-east-1.amazonaws.com/testecs:myname
    $ docker push xxx.dkr.ecr.us-east-1.amazonaws.com/testecs:myname
