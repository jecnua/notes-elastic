CoreOS (OLD NOTES - TO BE UPDATED)
|| Last update: 10 May 2019

* Intro

- UPDATE: Rocket is dead [[https://github.com/kubernetes/minikube/issues/3906]]
- UPDATE: Torus is dead 18 Feb 2017 [[https://github.com/coreos/torus/commit/4df3e5633f466f90047071b995a41fca3ecca5ad]]
- UPDATE: Looks like the OS too is dead but [[https://www.flatcar-linux.org/]]

They added signing and validating images first (docker only partway)

    "Any action is a separate operation. Doesn't have to run as root"
    -- Alex Polvi

Docker run in non-root account? When?

* OCI

Open Container Iniziative (CoreOS)
They tweaked to work with Docker v1 format. But when they asked a pull request to allow docker to support their app container images Docker refused.
Support hardware level protection via intel clear containers.

1y ago the question was how to standardise. Now is at version 0.1.0 (june 2016) and still working on it.
It's the best of docker format and appc images. Is also a format for container storage.

* Products

- coreOS
- etcd
- clair
- flannel
- rkt

- quay
- tectonic

* Rkt (Rocket) - DEAD PROJECT

.image images/docker-rkt.png

- [[https://github.com/kubernetes/minikube/issues/3906][Remove rkt container runtime]] - Minikube

Client application for it's container system.

Support from:

- google
- red hat
- EMC VMware

Rocket is actually a libcontainer competitor.
-> libcontainer: what docker used to replace the LXC kernel technology to address the usability issue

At the very core of containers are the same linux primitives that are used to create application sandboxes.

- Namespaces
- Seccomp
- Apparmor (deprecated)
- SELinux (deprecated)

But they run as root!

- Docker
- runc
- rkt

Why? To use correctly and easily *cgroups* (namespaces are not enough).
Running cgroups from from userspace is complex.

- cgroups (what you can use): memory, cpu, protection against fork-bomb (pids), *blkio*
- namespaces (what you can see): network, mount, processes

In kernel 4.6+ there is a new cgroup namespace
-> mask cgroups path inside the container

======
Layer 3-4
TCP-IP
hardware lb
BGP
DNS
IPTABLES
======

Rocket is an implementation of the App Container Specification

- https://github.com/coreos/rkt# rkt (github)

Rocket decided on CoreOS to use:

- systemd and system-spawn.
- btrfs

and a pluggable infrastructure (you can have your own stage 1/2).

- [[https://twitter.com/solomonstre/status/552294573842898944]]

With Docker, you have to run a magical “docker daemon” that handles all my containers
With rkt, you just run a process.

    People have been telling me stories that sometimes if you do the Wrong Thing
    and the Docker daemon has a bug, then the daemon can get deadlocked and then
     you have to kill it and all your containers die. I assume they work pretty
     hard on fixing these bugs, but I don’t want to have to trust that the Docker
     daemon has no bugs that will affect me. All software has bugs!

If you treat your container more like a process, then you can just run it,
supervise it with supervisord or upstart or whatever your favorite way to
supervise a process is

My coworker told me a very surprising thing about containers. If you run just one
process in a container, then it apparently gets PID 1? PID 1 is a pretty exciting
process. Usually on your computer, init gets PID 1. In particular, if another
container process gets orphaned, then it suddenly magically becomes a child of
PID 1.

- [[https://engineeringblog.yelp.com/2016/01/dumb-init-an-init-for-docker.html]]

I wrote a pretty bad blog post about container networking a while back. It can
be really complicated! There are these “network namespaces” that I don’t really
understand, and you need to do port forwarding, and why?

Do you really need to use this complicated container networking stuff? I kind of
just want to run container processes and run them on normal ports in my normal
network namespace and leave it at that. Is that wrong?
Unlike Docker, this means that if you use systemd to start rkt containers, you
are actually monitoring the container process rather than monitoring a client
process that connects to a daemon that in turn (directly or indirectly — depending
on your Docker version) starts the container.

* CoreOS history

From 1.0

- Signing and validating images (docker does this only partially??? check)
- Support hardware-level protection via intel Clear Container technology

    Any action is a separate action and doesn't have to run as root

Docker run in a root environment. There is a request to be run in a non-root.
(status???)

They started also the Open Container Initiative, that they tweaked to be compatible with the docker v1 format. They asked to do the same my opening a pull request to docker to support their standard.

* App Container Specification

Some links:

- [[https://github.com/appc/spec/blob/master/SPEC.md#dependency-matching]] App Container Specification
- [[https://github.com/appc/spec/blob/master/spec/pods.md]] Pods

- Process sharing linux namespaces
- App should log to STDOUT and STDERR

When you create a new docker (LXC) container, the container is allocated a fresh set of all new unix *namespaces* provided by *libcontainer*.

- https://github.com/docker/libcontainer libcontainer (github)

To save overhead in the linux kernel by creating new namespaces avery time (like docker does) they want to share it. There is a problem with this approach:

    If a container dies, it brings down all the other containers sharing the same ones

K8s pods uses IPs.

* Etcd

Etcd 3.0 is in beta in June 2016.
It has:

- redesigned internals (efficient and scalable)
- new api: gRPC based on stubby. is based on protobuf and http/2. decreased use of cpu and memory. http/2 allow lot of concurrent requests on the same tsl connection.
- new storage engine: continuos performance and continuos snapshot
- able to manage 5k machines

* About systemd

Docker _wants_ to do process supervision via docker deamon but is still just an
app and is not overly specialised.

* Re/Sources

- [[https://medium.com/@adriaandejonge/moving-from-docker-to-rkt-310dc9aec938#.a7fzbexh1][moving-from-docker-to-rkt]]
- [[http://jvns.ca/blog/2016/09/15/whats-up-with-containers-docker-and-rkt/][whats-up-with-containers-docker-and-rkt]]
