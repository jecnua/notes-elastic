NodeJS
|| Last update: 7 Jul 2018

* Facts

Node.js is an event-driven, non-blocking, single-threaded JavaScript runtime environment.
Created in [[https://www.youtube.com/watch?v=EeYvFl7li9E][2009 by Ryan Dahl]] on top of
Googlev8 to run javascript server side.
The backend of nodejs is written in C.

* Intro

Node.js' concurrency model for handling I/O operations is based on callback functions.

        Node.js is an event-based platform. This means that everything that happens
        in Node is the reaction to an event. A transaction passing through Node
        traverses a cascade of callbacks.
        Source: https://medium.com/the-node-js-collection/what-you-should-know-to-really-understand-the-node-js-event-loop-and-its-metrics-c4907b19da4c

In Node's architecture, this event-driven model is provided by a mechanism called the
event loop. The event loop is what allows Node.js to handle high throughput I/O operations and it's
implemented by a multi-platform C library called [[https://github.com/libuv/libuv][libuv]].

Hundreds of connections will only mean hundreds of socket or state objects,
and not hundreds of processes or threads as used in other programming languages.

        Nginx, similar to Node.js, is single-threaded but event-driven and also
        uses an event loop to handle multiple requests in a single thread. Its
        event loop is used to handle requests for slow I/O operations without
        blocking the main thread of execution.

NodeJS will use it's thread pool (libuv managed) only when it has no other choices.
As much as possible it will use the kernel asynch events.
[[http://man7.org/linux/man-pages/man7/aio.7.html][Not all I/O tasks will be managed by the thread pool]].
If possible the system will use asynch interface in the kernel instead.
UV_THREADPOOL_SIZE default is 4.

* The Event Loop

- [[https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/]]

Ut is a semi-infinite loop that performs polling and blocking calls to the
system kernel until one of the operations is completed. The kernel will notify
Node.js when an operation is completed so that its corresponding callback
function may be added to Node's poll queue for eventual execution.

        When one of these operations completes, the kernel tells Node.js so
        that the appropriate callback may be added to the poll queue to eventually
        be executed.

The event loop is not a stack and goes through _phases_ in which
tasks are handled in round robin.

Node.js exits when it no longer has any events to process.

There is only one thread used by nodejs and is the one running the event loop.

** Event Loop _phases_

.image images/nodejs_phases.png 500 _
.caption Source: [[https://medium.com/the-node-js-collection/what-you-should-know-to-really-understand-the-node-js-event-loop-and-its-metrics-c4907b19da4c]]

For each run:

- Timers - callbacks scheduled by setTimeout() and setInternal()
- I/O callbacks
- Poll - Retrieving I/O events
- Set Immediate - setImmediate() callbacks
- Close - on(close) callbacks

The queue is FIFO. It will execute all the callbacks ready or
until the max number is reached.

* Deep dive into the system

Network on linux is based on socket
returned by the kernel and is an integer
they are called socket descriptor or file descriptor
(even if they have nothig to do with file)

fd
is a system way to do obeject oriented abstraction
fd is an integer offset into an array kept in the kernel
every process has an array of fd
that is a pointer to an object that is the base64 format of the obect to which it refer to
who has a pointer to a virtual function table

it allows a lot of things like socker, files and pipe to support read
but does different things depending on the resource

so fd are not only files

systemcalls can block
they are lbrary calls into the system
if the kernel can't do it right now, your process gets descheduled
when you call to check if it's finished, it will be priritised again

a thread is relatively heacy weight
for the amount of data we need for a connection

** epoll

epoll and select are very similar system calls

now it the Loop
on the loop we are gonna block on the kernel with _epoll_wait
when the kernel have something interesting for us it will wake us up

epool handle the server socket

then when someone wants to connect it will wake us, and then we can do an accept
after the accept, we get back into the Loop
this time with the new connection socker we created with the accept()

use *uv* thread pool to manage it for you

* What is the event loop

    A semi-finite loop, polling and blocking on the
    O/S until some in a set of fd are ready.
    - Sam Roberts, IBMs

It exits when it no longer has any events to wait for, at which point
the loop must complete.

node exists when there is nothing to wait for in the epoll loop.

there is an unref function. this will allow to have something that is waiting
in the epoll loop but is not counting in the number for the things to keep node alive.
Like it's not important.

* What can we wait on?

- Pollable file descriptor you can wait on
- Time (next timeout can be directly waited on) - one timeout is directly pollable
- Everything else must happen off loop and signal back to the loop when done

** Pollable

- sockets (net/dgram/http/tls/https/child_processes pipes/stdin,out,err)
- time (timeouts and intervals) - all timeouts in node are sorted, so the closest one is first. it will look at when next is and take the next one is stick in
- dns.* (aside that other two)
- signals (self-pipe)
- child processes (signal to childs and pipes between the two processes are possible)

** NOT pollable

- file system (anything in fs.*)
- DNS dns.lookup() and getaddrinfo()

** The self-pipe trick

fs always happens in a thread pool.
you can't wait on threads on an epoll()

fs uses the *uv* thread pool unless they are asynch. the blocking call is made by the thread.
when complete the readiness is signaled back to the event loop using either an eventfd or a self-pipe.

create a pipe
self pipe
two ends
when a thread is done is writes on one end and one is listeing on the other side on an epollto wake up

* The UV thread pool

Default is 4 (you can increase with *UV_THREADPOOL_SIZE*)

used by:
- fs
- dns
- some crypto
- https.get()/request() if called by name
- any C++ addon that uses it

When one od this happens, the main event loop is not going to be blocked.
And it won't be blocked because it's being kicked off in the thred pool.
If there is not thread availbale, it will take longer.

You should use a caching dns proxy, linux has one. Or you can do the lookup yourself
using the other syscalls. If you do the lookup is will use puredns and it will do it in
the main loop. And it will be cached.

* Monitor

Monitor the loop time!

Should finish soon. Not hunders of millisends, if it is you may have blocking calls.

* Performances

NodeJS scales well because it uses LOW resources per connections thanks to this method.

* Private repo

https://medium.com/engenharia-noalvo/ways-to-have-your-private-npm-registry-and-a-final-diy-solution-eed001a88e74

- Nexus 3 https://help.sonatype.com/repomanager3/node-packaged-modules-and-npm-registries
- Verdaccio: no scale. no HA.
- Sinopia (abandoned)
- https://github.com/cnpm/cnpmjs.org: chinese? Simple File Store Service?
- https://github.com/jdxcode/npm-register

** Verdaccio

verdaccio/sinopia is not yet cluster ready https://github.com/verdaccio/verdaccio/issues/103
High availability using ECS cluster https://github.com/verdaccio/verdaccio/issues/1089
https://github.com/helm/charts/blob/master/stable/verdaccio/templates/deployment.yaml

https://survivejs.com/blog/verdaccio-interview/
SurviveJS
Verdaccio - A lightweight npm proxy registry - Interview with Juan Picado
If you develop JavaScript applications, you most likely use npm, the most famous package manager av…
Scale: Verdaccio v2 is file system based and that’s a problem if you want to scale, since Javascript is single thread and Node.js only uses one core for each process, a file system does not allow to scale properly. In v3, we are shipping the possibility to replace the default storage with a custom one, either in the cloud (Firebase, Google Cloud or Amazon S3) or any NoSQL database like CouchDB or MongoDB.
https://github.com/verdaccio/verdaccio/issues/475
GitHub
Create storage plugin for CouchDB · Issue #475 · verdaccio/verdaccio
https://www.npmjs.com/package/nano Exist an old implementation here: https://github.com/verdaccio/verdaccio/tree/storage_pluggable Example: https://github.com/verdaccio/verdaccio-memory https://git...

https://github.com/Remitly/verdaccio-s3-storage
https://github.com/asynchrony/docker-verdaccio-s3

https://github.com/Remitly/verdaccio-s3-storage/issues/6

* Re/Sources

- VERY GOOD - VIDEO: [[https://www.youtube.com/watch?v=P9csgxBgaZ8][Node's Event Loop From the Inside Out by Sam Roberts, IBM]] - 15 Dec 2016
- SLIDES: [[https://www.slideshare.net/NodejsFoundation/nodes-event-loop-from-the-inside-out-sam-roberts-ibm]]
- [[https://karloespiritu.com/understanding-the-node-js-event-loop/]]
- [[https://medium.com/the-node-js-collection/what-you-should-know-to-really-understand-the-node-js-event-loop-and-its-metrics-c4907b19da4c]]
- [[https://www.youtube.com/watch?v=EeYvFl7li9E]]
