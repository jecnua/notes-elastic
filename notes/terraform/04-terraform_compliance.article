Terraform compliance - NEEDS CLEANING
|| Last update: 15 Jun 2020

* TBD

- [[https://github.com/open-policy-agent/conftest/issues/298]]

how to add namespace in conftest

        conftest test -p deny.rego --namespace global docker-compose.yml
        conftest test -p deny.rego --namespace global.helm docker-compose.yml

cli options (no namespace)

- [[https://www.conftest.dev/options/]]

        terraform plan --out tfplan.binary
        terraform show -json tfplan.binary > input.json

        # The data file need to be called input to be used
        # with vcode

        # inputs are not in the opa dir because opa will merge all the json
        # files and cause a merge conflict
        # they are not in a subdir for the same reasons


        test_wrong:
            @echo "Running opa eval"
            opa eval --format pretty --data opa/ --input inputs/ecr_input_error.json "data.terraform.deny"
            @echo "\n\nRunning conftest"
            -conftest test -p opa inputs/ecr_input_error.json --namespace terraform
            @echo "\n\nRunning unit test"
            opa test -v opa/ecr.rego opa/ecr_test.rego inputs/ecr_input_mock.json

        test_correct:
            @echo "Running opa eval"
            opa eval --format pretty --data opa/ --input inputs/ecr_input_correct.json "data.terraform.deny"
            @echo "\n\nRunning conftest"
            conftest test -p opa inputs/ecr_input_correct.json --namespace terraform

          package terraform.tags_validation

          minimum_tags = {"ApplicationRole", "Owner", "Project"}

          key_val_valid_pascal_case(key, val) {
              is_pascal_case(key)
              is_pascal_case(val)
          }

          is_pascal_case(string) {
              re_match(`^([A-Z][a-z0-9]+)+`, string)
          }

          tags_contain_proper_keys(tags) {
              keys := {key | tags[key]}
              leftover := minimum_tags - keys
              leftover == set()
          }

          package terraform.plan
          # https://github.com/jmcshane/terraform-plan-opa-validate/blob/master/terraform-plan-parsing.rego

          import input as tfplan

          create_action := "create"

          created_objects := {resource.type: spec |
              # Use a specific variable to match the create action to the spec of the object
              some i
              tfplan.resource_changes[i].change.actions[_] == create_action
              resource := tfplan.resource_changes[i]
              spec := [ after_spec |
                  after_spec := tfplan.resource_changes[i].change.after
              ]
          }

          package terraform.library

          import input as tfplan

          get_resources_by_type(resource_type) = res {
            res := tfplan.planned_values.root_module.resources[_]
            res.type == resource_type
          }

          get_configurationresources_by_type(resource_type) = res {
            res := tfplan.planned_values.root_module.resources[_]
            res.type == resource_type
          }

          resource_contains_label(resource, label) {
            hash_contains_keys(resource.values.labels, label)
          }

          hash_contains_keys(hash, item) {
            _ = hash[key]
            key = item
          }

          list_contains_value(list, item) {
            list_item = list[_]
            list_item == item
          }
        Source: https://www.openpolicyagent.org/docs/latest/terraform/

* Fregot

- [[https://cloudsecurityalliance.org/blog/2020/02/21/using-open-policy-agent-opa-to-develop-policy-as-code-for-cloud-infrastructure/]]
