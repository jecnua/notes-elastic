Kata: Certified Kubernetes Administrator (CKA) cert preparation
|| Last update: 5 Nov 2018

* Kata

    watch kubectl get deploy,rs,pods,svc,endpoints,configmaps,secrets

The environment is here:

- [[https://github.com/jecnua/certified-kubernetes-administrator-cka-kata]]

* Install kubernetes

** Ensure swap is off

** Install kubernetes

** Install etcd

* Network via CNI

** install flannel

*** Specify CIDR and set up iptables

** install calico

** install on loopback

* Auth

** Try to authenticate with static token file and static passweord filter
** test connection with a new client certificate

* Tools

Spin two nodes with the right ubuntu on it

      install kubectl
      install tmux
      install kubectl bash autocomplete

pipe all to file

* kubectl

- Create a pod with tempfs/hostPath/local/protected
- kubectl describe
- kubectl edit???


    $ kubectl describe po nginx
    Name:               nginx-dbddb74b8-47p4z
    Namespace:          default
    Priority:           0
    PriorityClassName:  <none>
    Node:               ip-172-18-22-227.eu-west-1.compute.internal/172.18.22.227
    Start Time:         Thu, 18 Oct 2018 12:59:02 +0100
    Labels:             pod-template-hash=dbddb74b8
                        run=nginx
    [...]

Or deployment:

    $ kubectl describe deployment nginx
    Name:                   nginx
    Namespace:              default
    CreationTimestamp:      Thu, 18 Oct 2018 12:59:02 +0100
    Labels:                 run=nginx
    Annotations:            deployment.kubernetes.io/revision: 1
    Selector:               run=nginx
    [...]

** run some nodes with docker some with cri-o

* Network challanges

Check that:

- A unique IP is assigned to each Pod
- Containers in a Pod can communicate to each other
- The Pod is able to communicate with other Pods in the cluster
- The application deployed inside a Pod is accessible

* Others

Query the API

* Objects

- create a pod manually without IDE
- check how the status of a deployment change when you scale
- use label to select using equelity-based selectors
- use label to select using set-based selectors
- filter a kubectl call using labels
- add annotations
- kill the container not the pod
- set env variable for a pod

* Volumes 1

- create and emptydir volume
- create a pod with two containers writing on the same volume
- create configmap and secret from file and literal
- mount a config map in pod as dir
- mount a secret in pod as dir
- mount secret as env
- mount config as env
- use downward api

* Deployment

- create a deployment with 3 nginx alpine pods
- scale the deployment using nano
- scale the deployment using the cli

* Services

- create a cluster ip service
- check the dns resolution
- create a nodePort service
- check that nginx is running
- create an headless service

* probes

- make and example with liveness probe: command, http request

* configmaps

- create configmaps from literals (run then yaml)
- create configmaps from file
- access via env
- access via volume

use busybox and command

* secret

- create a secret
- access it

use busybox and command

* Limits

- create a pod with request and limit. make the pod allocate more and more memory until it's killed

* Volumes 2

- create a PV
- create a pvc
- create a storage class?
- provision a volume automatically
- create an ebs and attach it to a pod

* Ingress

- create an ingress controller and try name-based and route-based paths

* Deployments

- create a deployment
- do a change
- rollaback the deployment

* Job

- Create a job
- create a cronjob

* Quotas

- Add quotas on a namespace and test it out

set kube editor at nano

* Manage lifecyle events

- create a pod that can react to poststart and prestop

- create a deamonset
- create a statefulset

* Lifecycle hook

- Create lyfecicle hook in a pod.

* Pod node selector, affinity and anti-affinity

- label a node
- use node selector
- assign a pod to a nodes
- taint a node
- add a tolerance to the pod
- assign pod to node
