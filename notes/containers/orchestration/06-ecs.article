ECS
|| Last update: 12 Feb 2019

* Intro

NOTE: Most of these notes are taken from the AWS documentation on ecs.

ECS is a container management service region-specific.

* Cluster

A cluster is a logical grouping of resources (tasks and services).
If you run in ec2 lunch type, it will also include servers.
A cluster _can_ contain both ec2 and fargate workload.

** EC2

A server running a container agent and registered to an cluster is called
_ecs_container_instance_.

EC2 instances can only be part of one cluster and you should never move them
between two cluster (always use new ones).

Container instance status are _active_, _inactive_ or _draining_.

*** The draining status

- [[https://docs.aws.amazon.com/AmazonECS/latest/developerguide/container-instance-draining.html]]

You can change the status of an instance to _draining_. When you do it, no new
tasks are assinged to the node, running tasks are moved if possible and no task
will be scheduled for replacement.

If resources are available, replacement services tasks are started on other
instances.

This functionality enables you to remove a container instance from a cluster
without impacting tasks.

*** The ECS agent

- [[https://github.com/aws/amazon-ecs-agent]]

The ecs agent will use the role of the node to authenticate. It will register,
deregister containers with the LBs.

The config file is at _/etc/ecs/ecs.config_.

The agent is able to clean unused disk space of docker (by default every 3h).
It checks/clean old/stopped containers.

An agent status is _true_ or _false_.

*** ECS optimised AMI

On the _ecs-optimised_ami_ the agent is already installed. You can hook yourself
to the bootstrap process via _user_data_.

On it there are also installed docker and a _nanny_process_ called *ecs-init* to
monitor the agent.

- [[https://github.com/aws/amazon-ecs-init]]

You can programmatically find the last optimised AMI via cli, sdk, CF or terraform.
They save this info on parameter store and you can retrieve it anytime.

The AMI ships with 30GB: 8GB are for root, _22GB_ for _docker_LVM_. You need to
use *lvm* commands to check the space.

Docker data volume is mounted under _/dev/xvdcz_.

To configure the docker deamon you need to use a _cloud-boothook_.

- [[https://docs.aws.amazon.com/AmazonECS/latest/developerguide/bootstrap_container_instance.html#bootstrap_docker_daemon]]

Also look at _cloud_init_per_ tool.

- [[https://helpmanual.io/help/cloud-init-per/]]

You can use mime-multipart to join all them togheter.

Containers instances can be set to send logs to cloudwatch logs. However this
can be changed via _log_drivers_.

If you are using another image you will need to install the cloudwatch log agent.

** DELETING: Clean up

Load balancers need to be removed manually in a separated workflow in respect
of the ECS cluster.

- [[https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_CleaningUp.html]]

NOTE: AWS advices to scale service tasks to 0 before deleting it.

* Service

You can define the number of tasks you want to run on the cluster in a service.
A *service* will run and maintain a specified number of tasks simultaneously.

A service can define two types of workload:

- REPLICA
- DEAMON

** Deamon

A *deamon* run a single instance of a task on every node of the cluster.
Usually this is very useful to run agents and management deamons (collect metrics,
clean up the node, watch for events and so on). This is similar to the concept
of _deamon_set_ in k8s. For obvious reasons fargate do not support this type of
workload.

* Tasks

A *task*definition* is in _json_ and containers up to _10_ containers.
It defines lunch type, ports, drives and so on.

A *task* is an instatiation of a task definition.

You can't move a task to another cluster.

** Launch types

There are two types of launch type:

- EC2: You create one or more asg and attach it to the cluster
- Fargate: You just define the tasks but no cluster (costs much more)

*NOTE*: Many task definition parameters are _not_valid_ in fargate.

*** Fargate

Some things to keep in consideration:

- Will require the network mode to be AWSVPC: you have no control on the host it sort of make sense that they don't allow host or bridge
- Will require to specify the the cpu and memory at task level while at container level is optional: in the end makes no sense since there is no cluster
- Only supports AWSLOGS for log config: since you can't install any other log drivers
- Doesn't allow EBS or EFS: since you can't install drivers or mount anything

Fargate has only 10GB of docker layer storage and 4GB for volume mounts to be
shared among containers.

* Networking

- [[https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task-networking.html]]

You can launch a task with different Network configurations.

- host
- bridge
- awsvpc: Each task will have it's own ENI. (Beware on finishing the allocation space for ENI)

NOTE: User Defined Networks are not supported!

- [[https://github.com/aws/amazon-ecs-agent/issues/437][ISSUE #437 User Defined Networks]]

** AWSVPC

When using _awsvpc_ you must specify one or more subnets and one or more sg to attach
to the ENI.
It *only*supports*A/NLB*. When creating a target group you need to use _ip_ as
target type and not instance. This is because you are targeting the ENI and not
the node. However you lose the ability of dynamic port mapping.

** Internet access

If any of your container needs network access and is not running in mode awsvpc,
your server will need a public ip or a NAT.

If you need external access, you can map your network ports to a machine port
via bridge or host. The server sg *must* allow inbound access to the port you
want to expose.

* Namespaces

- [[https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definition_parameters.html#other_container_definition_params]]

Two docker flags can be spacified to share namespaces:

- pidMode: ontainers to share their process ID (PID) namespace with other containers in the task, or with the host
- ipcMode: containers to share their inter-process communication (IPC) namespace with the other containers in the task, or with the host

    Sharing the PID namespace enables for example monitoring applications
    deployed as containers to access information about other applications
    running in the same task or host.
    The IPC namespace allows containers to communicate directly through
    shared-memory with other containers running in the same task or host.
    Source: https://aws.amazon.com/about-aws/whats-new/2018/10/amazon-ecs-now-allows-two-additional-docker-flags-/

* Schedule workload

You can schedule based on resources, isolation and availability.

* Supported container registry

On fargate only ECR and dockerhub are supported. No other private container
registry.

* Problems

** User Defined Networks are not supported!

** Issue with cluster stabilising (~3h stabilizing)

    We have one stack stuck in UPDATE_ROLLBACK_IN_PROGRESS. The deployment of a
    new task/service failed and we CANCELLED the update. The stack went into
    UPDATE_ROLLBACK_IN_PROGRESS and never moved on.
    [...]
    We can't delete it it's just there. Please advice.

Reply:

    CloudFormation tries to ensure that all resources that it provisions are in
    a usable state to ensure there are no issues down the line. This is
    particularly important for eventually consistent resources. It seems that
    ECS service was waiting for getting the service stabilized, it waited for
    the default timeout of 3 hours (180 minutes) and finally moved to
    UPDATE_ROLLBACK_FAILED state. Now, since the stack is in
    UPDATE_ROLLBACK_FAILED state, you can go ahead and delete the stack.

Ways around it?

    Alternatively, you may choose to  skip the resource which is blocking the
    rollback and continue the update rollback to get the stack into an
    'UPDATE_ROLLBACK_COMPLETE' state from the UPDATE_ROLLBACK_FAILED' state.
    You can read more about it in the following link:
    [-] http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-continueupdaterollback.html
    You could also attempt to continue the rollback using the
    'continue-update-rollback' CLI command as shown in the document given below:
    [-] https://docs.aws.amazon.com/cli/latest/reference/cloudformation/continue-update-rollback.html

Basically:

    I do understand that it is a great inconvenience if the ECS service fails
    to get stabilized, it takes about 3 hours of time until you get a chance to
    make any further modifications on the stack. We already have a feature
    request for avoiding this situation as many customers raised this concern
    and Cloudformation service team is working on this issue. I have added +1
    on the internal ticket mentioning this case ID so that it can get more wait.

* Re/Sources

- [[https://github.com/aws/amazon-ecs-agent]]
- [[https://github.com/aws/amazon-ecs-init]]
- [[https://docs.aws.amazon.com/AmazonECS/latest/developerguide/container-instance-draining.html]]
- [[https://docs.aws.amazon.com/AmazonECS/latest/developerguide/bootstrap_container_instance.html#bootstrap_docker_daemon]]
- [[https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_CleaningUp.html]]
