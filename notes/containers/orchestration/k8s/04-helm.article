Helm (chaotic notes - NEEDS UPDATING)
|| Last update: 10 May 2019

* Intro

Package manager for kubernetes. He uses charts. Templates to deploy what you
need to deploy.

** Why

You can always do a:

  kubectl apply -f dir/*

So why use helm? helm has the concept of _releases_.
releases are stored as _configMaps_ inside kubernetes and are made by
the totality of all the resources applied to kubernetes.

- PRO: reuse code, templating, delete unused resources
- CON: lose the versions

kubectl we apply don't delete anything that's not present anymore.
If you in the latest version of your YAML do no have a resource
anymore, it will leave it there. HELM instead removes it.

* Concept

- Chart
- Repository
- Release

** Charts

Is the template of a kubernetes resource.
Charts have versions.

** Repositories

Repositories are just a bucket for charts.

** Release

A _release_ is an instance of a chart.

* Installation

HELM is an executable and can be downloaded from github.

** Linux

This example will download the binary in _/tmp_:

  cd /tmp
  wget https://storage.googleapis.com/kubernetes-helm/helm-v2.13.1-linux-amd64.tar.gz
  tar xvf helm-v2.13.1-linux-amd64.tar.gz
  cd linux-amd64/
  ./helm --help
  ./helm search
  ./helm init
  # Then put it in your path
  # sudo cp helm ~/bin/helm

* Usage

  helm repo update
  helm update

Create your own repo with charts

    helm search <-- all thing

If you want to just see what he is going to do:

    helm install xxx --debug --dry-run

* Rest

Deploy a set of services and deployments.
Information about releases are stored as config maps.

1) initialise (tiller) - get all help resources
2) help clent

    helm init

(deployments)

    help repo updates

git push
drone.io build the project
builds the docker image
help plugin
call the help chart and change the value
all this info is passed to helm
and send it to the cluster

* Helm 3

- [[https://sweetcode.io/a-first-look-at-the-helm-3-plan/]]

Moving to Lua.
