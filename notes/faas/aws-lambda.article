Lambda
|| Last update: 12 Mar 2018


* External advices

** CPU is throttled via Cgroups

You can verify that AWS Lambda uses Cgroups for CPU throttling by reading the contents of the special file /proc/self/cgroup and see your function is assigned to specific control groups such as "2:cpu:/sandbox-root-UXXIp3/sandbox-023d01", but you cannot directly see the imposed limits.

- [[https://www.kernel.org/doc/Documentation/cgroup-v1/cgroups.txt][cgroup-v1]]

** Memory

We allocate more memory than we need for our functions. Spikes can cause out of memory exceptions. We prefer to allocate more memory instead of experiencing these errors in production. Second reason is, although you only specify the RAM, AWS allocates proportional CPU to your functions.

** Startup costs

Python has not startup cost but JVM has a startup costs.

** Dependencies

You can't use python wheel and egg to package python program. You need to use their own.

** Very noisy neighbours

Lambda share the same infra with a LOT of other functions.

** Failures

In lambda you don't know it failed you need to know when you fail - wait timeout.
