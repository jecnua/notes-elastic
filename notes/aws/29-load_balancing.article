Load Balancing
|| Last update: 28 Jan 2019

* NLB

An hybrid layer4/5 load balancer.

** BAD: Allow Healthcheck from NLB requires whitelisting entire subnets

- [[https://forums.aws.amazon.com/thread.jspa?threadID=263245]]
- [[https://docs.aws.amazon.com/elasticloadbalancing/latest/network/target-group-register-targets.html#target-security-groups]]

To allow NLB Healthcheck you will need to whitelist the whole subnets where
you are spinning the NLB into.
The only other way is an horrible hack with lambdas to find the internal IPs
of the NLB (not straighforward) and keep it updated.
Example: [[https://github.com/binxio/cfn-lb-ip-address-provider]]

    Looks like currently the only way to determine IP addresses is by checking
    the ENI description for the name of the ELB.
    Source: https://forums.aws.amazon.com/thread.jspa?threadID=263245

** SSL termination

- [[https://aws.amazon.com/blogs/aws/new-tls-termination-for-network-load-balancers/]]
- [[https://network.exampleloadbalancer.com/nlbtls_detail.html]]

    Elastic Load Balancing now supports TLS termination on Network Load
    Balancers. With this new feature, you can offload the decryption/encryption
    of TLS traffic from your application servers to the Network Load Balancer,
    which helps you optimize the performance of your backend application servers
    while keeping your workloads secure. Additionally, Network Load Balancers
    preserve the source IP of the clients to the back-end applications, while
    terminating TLS on the load balancer.

    TLS termination on Network Load Balancers also offers centralized deployment
    of SSL certificates by integrating with AWS Certificate Manager (ACM) and
    Identity Access Manager (IAM). You can also optionally configure encryption
    to the targets.

However NLB was sold as a Layer4 (TCP only) load balancer. SSL termination clearly
makes no sense for something like that. I would define now an NLB as an hybrid
Layer4/5 LB.

SSL termination is managed via [[https://github.com/awslabs/s2n]].

It does integrate with ACM.

* Metrics

** Too many connections to the LB

- [[https://youtu.be/qy7zNaDTYGQ?t=2505][AWS re:Invent 2016: Elastic Load Balancing Deep Dive and Best Practices (NET403)]]
- [[https://docs.aws.amazon.com/elasticloadbalancing/latest/application/load-balancer-cloudwatch-metrics.html]]

How can you control if a LoadBalancer is suffering?
For the Classic Load Balancer there where two main metrics:

- Surge Queue Length: Request comes in but backend is busy and there is nowhere to send it. Stored in the load balancer. 1000 for each IP. CONSIDERED A BAD IDEA.
- Spillover Count

In the A/NLB however this metrics are not present. The most related metric on
the A/NLB would be:

- *Rejected*Connection*Count*: Number of request rejected because there is nowhere to send it

Some more info here:
