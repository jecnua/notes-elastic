SRE notes
|| Last update: 21 Aug 2018

* Intro

- [[https://theagileadmin.com/2018/10/02/sre-the-biggest-lie-since-kanban/]]

Good article.

Versatile module to manage mission critical workload.

Principles:

- Needs service level objectives (SLO) *with*consequences*
- Have time to do tomorrow better than today
- Have the ability to regulate their workload

* SLO

Set of goals for reliability (how well the system should behave). Based on
customer experience. If the customers are happy you are meeting your SLOs.
Goals that your customer cares enough. Objective on how reliable it needs to be.
Measure how the application is going and be sure it stays that way.
When you application are not meeting SLO your customers are unhappy.
SLA are your legal agreements. Used between organization. Penalty usually
monetary.

- Measure
- Account
- Act

** Consequences

*** Error Budget Policy

Balance error budget against engineering time, development velocity and money.
Budget is for that. Is a budget for failures.
A budget is the *difference* between 100% availability and your SLO.
Is a budget to be *spent*.

You are allowed to have error and is ok to have them.

What happens when you spent all your budget?

The error budget policy is what you agree to do when the application exceeds
it's error budget. The payment is not money must be something to visibly
improve reliability.

Example:

- No new feature launched
- Sprint planning may only pull Postmortem Actions from the backlog
- Dev needs to meet with SRE daily to explain what they are doing to improve it

* Making tomorrow better than today

- Define and refine SLOs
- Enact the error budget policy
- Responsible to make sure it meets the standard and SLOs

** Toil

- Operating system in prod
- Must be part of the role
- On-call and incident management
- Bounded part of the role (less than 50% workable must be operations)

You have toil but is capped. If you just have toil you can't get anything
better. Project work example:

- Consulting on System Architecture and Design
- Authoring and iterating on monitoring
- Automation of repetitive work
- Coordinating and implementation of Postmortem action items

* Shared Responsability Model

How it's done at google.

Don't dump all the production services on an SRE team.
Provide an SRE team some way of giving back-pressure to the devs to provide
balance.

They are responsible for the quality of the running system not for running the
prod system.

.image images/regulating_workload.png _ 400

Maintaining consistency means fewer SREs can support more product.

* Re/Sources

- VIDEO [[https://www.youtube.com/watch?v=c-w_GYvi0eA][Getting Started with SRE - Stephen Thorne, Google]] 10 Jul 2018
