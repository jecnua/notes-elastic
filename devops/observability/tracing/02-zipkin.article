Zipkin
|| Last update: 2 May 2018

* Intro

- [[https://zipkin.io/]]
- [[https://github.com/openzipkin]]
- [[https://gitter.im/openzipkin/zipkin]]
- [[https://twitter.com/zipkinproject]]

Zipkin is a distribuited tracing system written in Java and OpenTracing compatible.
It's responsible for SPAN ingestion and storage.

Zipkin was created by Twitter in 2012 based on the Google Dapper paper. In 2015,
OpenZipkin became the primary fork.

OpenZipkin is an org on GitHub. It contains tracers, OpenApi spec,
service components and docker images.

* Architecture

.image images/zipkin_arch.png
.caption Source: [[https://zipkin.io/pages/architecture.html]]

- Reporter: code libraries
- Collectors: collectors report spans to HTTP, kafka, scribe, etc
- Storage: engines collect spans storing them in In-Memory, Mysql, Cassandra, etc
- UI: Users query for traces via Zipkinâ€™s Web UI or Api.

** Reporter

Is the component that transport the span. Every instrumented application
contains a reporter.

Records:

- timing metrics
- metadata

and routes them to the collector.

** Collectors

They are responsible for forwarding the span request to the storage layer.
Default collector is HTTP (also support kafka and scribe).

** Storage

- In-memory
- MySQL (not adviced in PROD for performance issues)
- Cassandra
- Elasticsearch

To use Elasticsearch export STORAGE_TYPE and ES_HOST variables.

* Span

The document fields more important are:

- traceId
- id (of the span)
- name
- duration (microsecond)
- timestamp (start time)
- binaryAnnotations (tags)

* Test it

Run:

    docker run -d --name zipkin --rm -p 9411:9411 openzipkin/zipkin

* Re/Sources

- [[https://sematext.com/blog/opentracing-zipkin-as-distributed-tracer/]]
- [[https://www.jfokus.se/jfokus18/preso/An-Introduction-to-Distributed-Tracing-and-Zipkin.pdf]] - Very useful to understand the concepts
