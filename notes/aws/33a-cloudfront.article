Cloudfront and Lambda@Edge
|| Last update: 23 Apr 2019

* Cloudfront

** Limits

It is not possible at the moment to find out what is the limits for CloudFront
number of distribution with lambda associations (default is 25).

    So I did some digging online and it does not appear to be possible to check
    these specific CloudFront limits from the customer side. In order to check
    these updated custom limits in future, you will need to open a case with
    Premium Support and then we'll be able to check on the internal tooling.
    Source: AWS Support

To find out how many current CloudFront distributions in an account have
associated Lambda@Edge functions you need to loop and use the CLI:

    Then, with regards to checking how many CloudFront distributions have Lambda
    functions associated with them.
    You are correct here in that the only way of finding this out is to examine
    the behaviours for each distribution and check if any functions are
    associated. Unfortunately AWS does not currently have an official automated
    way of performing a query like this.
    Source: AWS Support

** It is impossible to do blue/green with CloudFront

- [[https://forums.aws.amazon.com/thread.jspa?threadID=256836]]
- [[https://serverfault.com/questions/714742/blue-green-deployments-with-cloudfront]]

We searched online with no success and also opened a support ticket:

    QUESTION:
    Is it possible to due a blue/green deployment or a Canary deployments of a
    CloudFront distribution?
    Just to be clear I'm not referring to blue/green or Canary in relatPriceClass_100ion to
    the origin of the CloudFront distribution, I'm referring to it in relation
    to changing the configuration of the CloudFront distribution itself.

    ANSWER:
    You are right, at this time, blue/green deployments are not possible due to
    the fact that only a single CloudFront distribution can contain a single
    CNAME.  This means that you cannot use the same CNAME across multiple
    distributions and then fail over using DNS to another distribution as all
    distributions share the same IP space which means that traffic would get
    routed to whatever distribution has the alternate domain name associated to
    it, in it's distribution config.

*** CNAME already exists

- [[https://aws.amazon.com/premiumsupport/knowledge-center/resolve-cnamealreadyexists-error/]]
- [[https://stackoverflow.com/questions/52769331/cnamealreadyexists-pointing-subdomain-to-distribution-in-new-account]]
- [[https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/CNAMEs.html#alternate-domain-names-wildcard]]
- [[https://stackoverflow.com/questions/41546800/receiving-error-cname-already-registered-with-cloudfront-on-bitbucket-hosting]]

    Duplicate and Overlapping Alternate Domain Names
    You cannot add an alternate domain name to a CloudFront distribution if the
    alternate domain name already exists in another CloudFront distribution,
    even if your AWS account owns the other distribution.
    However, you can add a wildcard alternate domain name, such as *.example.com,
    that includes (that overlaps with) a non-wildcard alternate domain name,
    such as www.example.com. Overlapping domain names can be in the same
    distribution or in separate distributions as long as both distributions were
    created by using the same AWS account.
    If you have overlapping alternate domain names in two distributions,
    CloudFront sends the request to the distribution with the more specific name
    match, regardless of the distribution that the DNS record points to. For
    example, example.domain.com is more specific than *.domain.com.
    Source: https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/CNAMEs.html

- [[https://serverfault.com/questions/910295/cnamealreadyexistsexception-when-trying-to-add-an-alternate-domain-name-to-a-clo]]

Possible reason?

    You can't create the Alternate Domain Name wildcard *.example.com if any
    other AWS account has anything configured in CloudFront this wildcard also
    matches. If account A has, for example, www.example.com, then account B
    cannot create *.example.com because that would potentially allow account B
    to hijack www.example.com if account A deleted their distribution.
    Source: https://stackoverflow.com/questions/54115340/cnamealreadyexists-when-setting-a-wildcard-cname-in-a-cloudfront-distribution

** Impossible to automatically migrate a distribution

- [[https://aws.amazon.com/premiumsupport/knowledge-center/cloudfront-migrate-account/]]

** User agent and the referer

You can forward the _user_agent_ *BUT* it will dilute the cache key.
You need to open support tickets to forward 'user agent and the referer' and
not cache them.

To forward both the *user*agent* and the *referer* header and have them
not be part of the cache-key of each object, you need to raise support
tickets.

    We have a undocumented feature where I can allow your distribution to
    forward both the user-agent AND referer header and not have it be part of
    the cache-key of the object.  If you'd like me to enable this for your
    distribution please provide me a list of the distribution(s) that you wish
    to have this enabled on and I can add that for you on the back-end.
    [...]
    Unfortunately, at this time, it's still a manual process as this is not a
    live feature that we've released to the public, so any changes for this
    would need to be handled by a support case.
    Source: AWS Support

Obviously this doesn't scale if you have many hundreds of CloudFront distributions.
No way to check from the dashboard of SDK whether or not the feature is enabled.
You lose it if you replace the distribution with another one.

Also important to know:

    [...] you need to aware that when this feature is enabled, all methods will
    be enabled (ie GET, HEAD, OPTIONS, PUT, PATCH, POST, and DELETE) on the
    distributions that you have provided.
    Source: AWS support

** Geoblocking

CloudFront is able to do Geoblocking depending on the region.

* Lambda@Edge

- [[https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/AmazonCloudFront_DevGuide.pdf#lambda-at-the-edge]]
- [[https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-at-the-edge.html]]
- [[https://docs.aws.amazon.com/lambda/latest/dg/lambda-edge.html]]

Lambda@Edge can be used to customize content or behaviour by adding logic to
a request before it hit origin.
The functions run in the Edge Locations of the CloudFront CDN. Allows you to
add "intelligence" in the CDN, without having to forward the request to a
backend and losing benefits of content caching and geographical proximity with
the client.

RESTRICTION: Like CloudFront, a Lambda@Edge function cannot be outside of
us-east-1 in terms of where it's created.

LATEST is not supported, you need to specify a version.

If you want not to pay when DDoS'd you can pay for Shield and have the
economic protection.

You obviously cannot delete a Lambda function while associated with a CloudFront
Distribution. When you remove all associations to CloudFront Distributions,
function replica are dropped after... a while.

QUESTIONS

- Can you filter for lambda at edge?
- Multiple handlers in the same lambda?
- How do you do geolocation?

QUESTIONS

Environment variables are not supported with Lambda@Edge. This makes it difficult
to do logging levels properly among other things. If you don't want to hardcode
parameters, you must inject them at function build and deploy time.

- [[https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/lambda-requirements-limits.html#lambda-requirements-lambda-function-configuration]]

CON:

- No Environment variable
- CWLogs are in separate AWS regions
- Change Host header when changing Origin
- Forwarded Cookies are part of the cache key

** Finding triggers

    For an AWS Lambda function that is not a Lambda@Edge function if I go to it
    the AWS Management Console I can see a list of the triggers that cause the
    Lambda function to fire.

    But if I do this for a Lambda@Edge function there are no triggers listed
    when I was expecting to see the CloudFront distributions for which the
    Lambda@Edge function is firing for some CloudFront event.

I can't find it with list-event-source-mappings in the CLI either.

    Unlike normal lambda function, lambda@Edge functions can be associated with
    an immutable version, and not to $LATEST version. So when you have loaded
    the lambda console, this will always shows the $LATEST version of lambda
    function, which wont be having any CloudFront triggers. You may need to
    select the right version of the function (based on which function version
    you have configured your CloudFront with), to see the triggers.
    [...]
    And once you click on this trigger, you may see the details like the
    CloudFront distribution, event-type and path-pattern.

** Triggers difference

<-- VIEW --> CF <-- ORIGIN -->

** Cookie behaviour

- [[https://stackoverflow.com/questions/53196242/aws-lambdaedge-to-set-cookies-to-origin-response]]
- [[https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Cookies.html]]
- [[https://aws.amazon.com/blogs/networking-and-content-delivery/leveraging-lambda-at-edge-for-adtech-cookie-syncing-at-the-edge/]] - 25 SEP 2018

    [...] or Forward Cookies, choose Whitelist and add dsp_uid to the Whitelist
    Cookies list. It’s important that you enable cookie forwarding for the cookie
    syncing to work correctly.

    Don't forward cookies to your origin – CloudFront doesn't cache your objects
    based on cookie values. In addition, CloudFront removes the Cookie header
    from requests that it forwards to your origin and removes the Set-Cookie
    header from responses that it returns to your viewers.
    Source: https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/Cookies.html

You need to forwarded the whitelist of cookies you want to set.
So if you are not doing it already it WILL dilute the cache.

* Prices

- [[https://aws.amazon.com/cloudfront/pricing/]]

You can have different types of price class in CF.

- PriceClass_100 (cheapest): US, Canada and Europe
- PriceClass_200: All but Australia and South America
- PriceClass_All (default): All
