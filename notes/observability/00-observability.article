Observability
|| Last update: 10 May 2018

* Questions

- How do you know your system is healthy?
- Do you receive notifications or alert if something is deviating from standard?
- Do you have an idea of what is your healthy state?

* Intro

- [[https://peter.bourgon.org/blog/2017/02/21/metrics-tracing-and-logging.html]]

.image images/venn.png
.caption Source: [[https://peter.bourgon.org/blog/2017/02/21/metrics-tracing-and-logging.html]]

-  Logging - recording events
-  Metrics - data combined from measuring events
-  Tracing - recording events with causal ordering

(credit: coda hale)

Different tools have different focus:

- Metrics: Aggregatable
- Logging: Events
- Tracing: Request scoped

(credit: peter bourgon)

Their scope overlap.
How to use the tools?

- Log - event (response time)
- Metric - value (response time)
- Trace - tree (response time)

(credit: adrianfcole)

Logs show the response time. Metrics will tell you if the response time is in line
with the expected behaviour and how to compare to other requests. Traces shows you
where that time was spent inside the call and how was it distributed.

- Log - will store all the events to be easily searched and aggregated
- Metric - can identify trends
- Trace - identify cause across services

(credit: adrianfcole)

* Re/Sources

- [[https://www.honeycomb.io/wp-content/uploads/2018/08/Honeycomb-Guide-Achieving-Observability-v1_1.pdf]] - Aug 2018
- [[https://www.jfokus.se/jfokus18/preso/An-Introduction-to-Distributed-Tracing-and-Zipkin.pdf]] - Amazing read
- [[https://peter.bourgon.org/blog/2017/02/21/metrics-tracing-and-logging.html]] - Feb 2017
