CKA notes
|| Last update: 10 Oct 2018

* To clarify

- k8s ports
- cgroup drivers
- no need for cni package

* Kubernetes course: CKA certified kubernetes administrator

* Intro

.image images/k8s_high_level.png
.caption Source: [[https://www.safaribooksonline.com/videos/oscon-2017/][Kubernetes hands-on - Kelsey Hightower (Google) - Part 1]]

* Nodes memory

Kubernetes controller and node servers are expected to have *swap*disabled*.
This is the recommended deployment. If swap is not disabled, kubelet service
will not start on the masters and nodes.

Kubernetes requires the swap to be off! To disable it on a node you can do:

    # As root
    swapoff -a

and then remove it from the _/etc/fstab_ file.

You could disable it by passing --fail-swap-on=false but is not adviced.

    The kubelet now fails if swap is enabled on a node. To override the default
    and run with /proc/swaps on, set --fail-swap-on=false. The experimental
    flag --experimental-fail-swap-on is deprecated in this release, and will be
    removed in a future release.
    Source: https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG-1.8.md#before-upgrading

- [[https://kubernetes.io/docs/reference/command-line-tools-reference/kubelet/]]
- [[https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG-1.8.md#before-upgrading]]
- [[https://kubernetes.io/docs/setup/independent/]]
- [[https://github.com/kubernetes/kubernetes/issues/53533]]

* Network

Kubernetes made some interesting choices on how networking should be implemented.
It defines the network model but leaves it to third party plugins a way to
implement it.

Each pod can communicate to each other pod on any host of the cluster, without
a NAT.

** CNI

- [[https://github.com/containernetworking/cni]]

    CNI (Container Network Interface), a Cloud Native Computing Foundation
    project, consists of a specification and libraries for writing plugins
    to configure network interfaces in Linux containers, along with a number
    of supported plugins. CNI concerns itself only with network connectivity of
    containers and removing allocated resources when the container is deleted.
    Because of this focus, CNI has a wide range of support and the specification
    is simple to implement.
    Source: https://github.com/containernetworking/cni

A CNI plugin is an *executable* invoked by the container management system. It's
responsible for:

- Inserting the network interface (one end of a vETH pair) in the container network namespace
- Making changes to the host: like attaching the other end of the vETH pair to the bridge network
- Assign the IP, put up the routes and apply IPAM rules depending on your topology

You can choose the right plugin for your workload.

** CNI plugins

- [[https://github.com/projectcalico/calico-cni]]
- [[https://github.com/weaveworks/weave]]

*** Flannel

When you configure flannel you will need to pass the CIDR block your k8s cluster
will need to use and assign it to the nodes.

You can define this CIDR with:

    --pod-network-cidr=10.244.0.0/16

- [[https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/]]

* The cluster

** Primitives and objects

Kubernetes objects are _persistent_entities_ in the k8s system. 

* Re/Sources

- [[https://linuxacademy.com/linux/training/course/name/certified-kubernetes-administrator-preparation-course]]
- [[https://www.safaribooksonline.com/videos/oscon-2017/][Kubernetes hands-on - Kelsey Hightower (Google) - Part 1]]
