Prometheus + Consul + Registrator
|| Last update: 5 April 2017

* Intro

* On registrator

- https://github.com/gliderlabs/registrator
- http://gliderlabs.com/registrator/latest/user/quickstart/
- http://gliderlabs.com/registrator/latest/user/run/
- http://gliderlabs.com/registrator/latest/user/services/

USE master

- https://hub.docker.com/r/gliderlabs/registrator/tags/

* On k8s side

You can configure k8s to use consult like this:

- https://prometheus.io/docs/operating/configuration/#%3Cconsul_sd_config%3E

On _prometheus.yml_:

    scrape_configs:
    - job_name: consul-mgmt-def
      consul_sd_configs:
        - server: 'URI:80'
          services:
            - 'cadvisor'
            - 'node-exporter'
      relabel_configs:
      - source_labels: [__meta_consul_service]
        action: replace
        target_label: service_on_consul
      - source_labels: [__meta_consul_node]
        action: replace
        target_label: consul_node
      - source_labels: [__meta_consul_service_address]
        action: replace
        target_label: internal_ip
      - source_labels: [__meta_consul_service_port]
        action: replace
        target_label: listening_port
      - source_labels: [ '__meta_consul_service_id' ]
        action: replace
        regex: (.*):(.*):(.*)
        replacement: $2
        target_label: container_name
      - source_labels: [ '__meta_consul_service_id' ]
        action: replace
        regex: (.*):(.*):(.*)
        replacement: $1
        target_label: host_name

  - job_name: consul-mgmt-es
    metrics_path: "/_prometheus/metrics"
    consul_sd_configs:
      - server: 'URI:80'
        services:
          - 'elasticsearch-9200'
    relabel_configs:
    - source_labels: [__meta_consul_service]
      action: replace
      target_label: service_on_consul
    - source_labels: [__meta_consul_node]
      action: replace
      target_label: consul_node
    - source_labels: [__meta_consul_service_address]
      action: replace
      target_label: internal_ip
    - source_labels: [__meta_consul_service_port]
      action: replace
      target_label: listening_port
    - source_labels: [ '__meta_consul_service_id' ]
      action: replace
      regex: (.*):(.*):(.*)
      replacement: $2
      target_label: container_name
    - source_labels: [ '__meta_consul_service_id' ]
      action: replace
      regex: (.*):(.*):(.*)
      replacement: $1
      target_label: host_name

** Analyse it

After point to consul:

    - job_name: consul-mgmt-def
      consul_sd_configs:
        - server: 'URI:80'

** Select some services

      services:
        - 'cadvisor'
        - 'node-exporter'

If you don't specify _services_ in the prometheus yaml,
all the services on consul will be scraped! But I am sure you have some dockers
that do not expose prometheus metrics.
You will have a lot of errors because of this. There are probably better way to
do it, but for now selecting the _name_ (can be there more than once), works.

** Labels

Consul does allow to put any meta-label:

- https://www.consul.io/docs/agent/options.html#_node_meta

But for now they are not read automatically:

- https://stackoverflow.com/questions/42420380/can-prometheus-read-consul-node-meta

If you want to rename the label and be visible in the _target_ page, you need to
use relabeling.

    relabel_configs:
    - source_labels: [__meta_consul_service]
      action: replace
      target_label: service_on_consul
    - source_labels: [__meta_consul_node]
      action: replace
      target_label: consul_node
    - source_labels: [__meta_consul_service_address]
      action: replace
      target_label: internal_ip
    - source_labels: [__meta_consul_service_port]
      action: replace
      target_label: listening_port
    - source_labels: [ '__meta_consul_service_id' ]
      action: replace
      regex: (.*):(.*):(.*)
      replacement: $2
      target_label: container_name
    - source_labels: [ '__meta_consul_service_id' ]
      action: replace
      regex: (.*):(.*):(.*)
      replacement: $1
      target_label: host_name

This changes the label name to something more uselful and clear to use.

** Change from default endpoint

What if the endpoint is not standard?
I decided to split the jobs in two. I have a job name to cover the services
that expose _non_default_ endpoints like this:

    - job_name: consul-mgmt-es
      metrics_path: "/_prometheus/metrics"
      consul_sd_configs:
        - server: 'URI:80'
          services:
            - 'elasticsearch-9200'

Relabeling follows the same rules.

** Reload

- https://prometheus.io/docs/operating/configuration/

To reload a config:

    curl -XPOST http://<URI>/-/reload

** TODO

Ignore node or include node:

- https://stackoverflow.com/questions/40376937/prometheus-how-to-drop-a-target-based-on-consul-tags

Rename labels:

- https://www.robustperception.io/life-of-a-label/
- https://groups.google.com/forum/#!topic/prometheus-developers/XmYQvggYYqs
- https://github.com/prometheus/prometheus/issues/2220
- https://github.com/prometheus/prometheus/issues/771
- https://github.com/prometheus/prometheus/issues/1083

To read:

- https://www.robustperception.io/finding-consul-services-to-monitor-with-prometheus/
- http://blog.alexellis.io/prometheus-monitoring/
- https://stackoverflow.com/questions/42835784/how-to-monitor-discover-more-docker-containers-with-prometheus
- https://github.com/uschtwill/docker_monitoring_logging_alerting
- https://www.weave.works/running-consul-kubernetes-monitoring-prometheus/
- http://rancher.com/docker-monitoring-continued-prometheus-and-sysdig/
- http://rancher.com/docker-labels/
- https://www.weave.works/prometheus-kubernetes-deploying/
- https://www.weave.works/monitoring-kubernetes-infrastructure/
- https://www.weave.works/prometheus-configmaps-continuous-deployment/
- https://www.weave.works/k8s-future-simplified-kubernetes-installation/
- http://cloudacademy.com/blog/kubernetes-ecosystem-operations/
- http://kube.news/
- https://coreos.com/blog/the-prometheus-operator.html
- https://coreos.com/blog/kubernetes-1-6.html
- https://sirile.github.io/2015/07/28/scaling-with-discovery-on-docker-swarm-with-consul-registrator-and-haproxy-with-prometheus-monitoring-and-elk-log-aggregation.html
- https://prometheus.io/blog/2015/06/01/advanced-service-discovery/
- https://github.com/gliderlabs/registrator/issues/320
