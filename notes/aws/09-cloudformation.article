Cloudformation
|| Last update: 26 Oct 2018

* Intro

Update reference archs:

- ECS [[https://github.com/aws-samples/ecs-refarch-cloudformation/]]

* Helper scripts

- [[https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-helper-scripts-reference.html]]

    AWS CloudFormation provides the following Python helper scripts that you can
    use to install software and start services on an Amazon EC2 instance that
    you create as part of your stack:
    cfn-init: Use to retrieve and interpret resource metadata, install packages,
    create files, and start services.
    cfn-signal: Use to signal with a CreationPolicy or WaitCondition, so you can
    synchronize other resources in the stack when the prerequisite resource or
    application is ready.
    cfn-get-metadata: Use to retrieve metadata for a resource or path to a specific
    key.
    cfn-hup: Use to check for updates to metadata and execute custom hooks when
    changes are detected.
    Source: https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-helper-scripts-reference.html

* Drift detection

- [[https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-stack-drift.html]]

* Best practices

- [[http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/best-practices.html#organizingstacks]]

Be careful with DependOn not to create loop between resources.

** Notifications

- [[http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/using-cfn-updating-stacks-monitor-stack.html]]

Use NotificationARNs.member.N with CreateStack to push stack events into SNS in
real-time.

* Share modules

The best practices to share modules is to pull them on s3 and allow people to
import them. However, you need to be careful not to break compatibility with
older versions and allow people to _lock_ to a specific version.

Following the advices here, I decided to use two namespaces:

- build number
- latest

on s3 and copy the templates every run.

- [[https://aws.amazon.com/answers/devops/aws-cloudformation-validation-pipeline/]]
- [[https://s3.amazonaws.com/solutions-reference/aws-cloudformation-validation-pipeline/latest/aws-cloudformation-validation-pipeline.pdf]]

* Linting and Validation

** validate-template

    aws cloudformation validate-template

Very limited. You need to be online and

** cfn-python-lint

- [[https://github.com/awslabs/cfn-python-lint]]

Created by AWS, this linter is much more useful than the standard cli validate
command.
The tool is able to tell you if you are passing the right value (int or string)
and if you have unused variables/condition. Very useful. It accept wildcard:

    cfn-lint cloud_formation/*.yml

Example of using it with drone:

    lint-cf:
      image: python:3.7.1-alpine3.8
      pull: true
      commands:
      - pip install cfn-lint
      - cfn-lint cloud_formation/*.yml
      when:
        event: push

* ISSUE: Tagging

CF does not allow you to tag everything that the CLI does. Terraform does a much
better job at that. To see the list of Resources you can tag on creation, you
can go here:

- [[https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#tag-resources]]

You can fasten the process by adding tags when you apply create-stack so that
it gets propagates to all of them.

    create-stack
    --stack-name <value>
    ...
    [--tags <value>]

    Key-value pairs to associate with this stack. AWS CloudFormation also
    propagates these tags to the resources created in the stack. A maximum
    number of 50 tags can be specified.
    Source: https://docs.aws.amazon.com/cli/latest/reference/cloudformation/create-stack.html

- [[https://docs.aws.amazon.com/cli/latest/reference/cloudformation/create-stack.html]]

*HOWEVER* It gets propagated only to the ones that can be tagged at start (so
you won't really solve the problem of tagging everything).

Some resources are not even in the list. You can't tag things like:

- Parameter store entry
- CloudWatch logs

and I expect more.

- [[https://github.com/capitalone/cloud-custodian/issues/1994]]

* ISSUE: You can't activate es logs via CF

Only gui, sdk and cli.

- https://docs.aws.amazon.com/elasticsearch-service/latest/developerguide/es-createupdatedomains.html#es-createdomain-configure-advanced-options

* Custom resources

- [[http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-custom-resources.html]]

    Custom resources enable you to write custom provisioning logic in templates
    that AWS CloudFormation runs anytime you create, update (if you changed the
    custom resource), or delete stacks.
    [...]
    Custom resources require one property: the service token, which specifies
    where AWS CloudFormation sends requests to, such as an Amazon SNS topic.
    Source: http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/template-custom-resources.html

You can notify SNS or a lambda.

* Re/Sources

- [[https://docs.aws.amazon.com/cli/latest/reference/cloudformation/create-stack.html]]
- [[https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/Using_Tags.html#tag-resources]]
- [[https://github.com/capitalone/cloud-custodian/issues/1994]]
- [[https://aws.amazon.com/answers/devops/aws-cloudformation-validation-pipeline/]]
- [[https://s3.amazonaws.com/solutions-reference/aws-cloudformation-validation-pipeline/latest/aws-cloudformation-validation-pipeline.pdf]]
