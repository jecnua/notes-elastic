Testing terraform
|| Last update: 05 Jan 2018

* Testing terraform

https://github.com/chef/inspec
http://inspec.io/

https://github.com/newcontext/kitchen-terraform

** Discarded: test-kitchen + serverspec

.html videos/Untangling_Terraform_Through_Refactoring.html

Use test-kitchen + serverspec.
You will still need to spin up instances on AWS and SSH into them.

limited because you ssh in serverspec and run serverspec
it would test what's on ON the machine
that's usually managed by puppet
unless you pull metadata and check that
costly because is not a mock
every test spin something on aws
so you pay 1h-min form every spin
if the converge require teardown
you pay again and again
is not a mock or tested locally
so it has the price involved

** aws-spec

.image images/awspec-logo.png

[[https://github.com/k1LoW/awspec][github]]

https://github.com/k1LoW/awspec/blob/master/doc/resource_types.md

** To test

[[https://github.com/serverworks/aws-spec][aws-spec]]


** Continuous validation on file change

The following implementation is in place to continuously run terraform validate on every file change in the background.
It will help you not to break terraform while working locally.

*REQUIREMENTS*: Terminal notifier on macOSX or growl (with small changes to the following file) in all the other.

*** Setup

Gemfile:

    gem 'guard'
    gem 'guard-shell'
    gem 'terminal-notifier'
    gem 'terminal-notifier-guard'

plus terminal-notifier or growl installed on the machine.

_Guardfile_:

    project_name = 'project-name'
    notification :terminal_notifier, app_name: 'MyApp ::', activate: 'com.googlecode.iTerm2' if `uname` =~ /Darwin/
    guard :shell, :ignore => '**/.terraform' do
      watch /.*.tf/ do |_m|
        if system('./__validate_all_silent.sh')
          `echo ""; echo "Success";`
        else
          TerminalNotifier::Guard.notify('Failed', title: 'Terraform validation', subtitle: project_name, type: :failed, sound: :default)
          `echo ""; echo "Failed";`
        end
      end
    end

__validate_all_silent.sh (in root dir):

    #!/bin/bash
    # Runs a terraform validate in all the subdirectories and report the result
    N_SUCCESS=0
    N_FAILED=0
    for a_directory in `ls -d */`
    do
        ( cd $a_directory && terraform validate ) &> /dev/null
        RESULT=$?
        if [ $RESULT -eq 0 ]; then
          let N_SUCCESS=N_SUCCESS+1
        else
          let N_FAILED=N_FAILED+1
        fi
    done
    if [[ $N_FAILED -ne 0 ]]
    then
      exit 1
    else
      exit 0
    fi

*** Usage

The with a shell go in the terraform directory and run:

    bundle exec guard

You will see both shell and notifications:

    [1] guard(main)>
    Failed
    [1] guard(main)>
    Failed
    [1] guard(main)>
    Success

.image ./images/notifier.png _ 300


* Intro

Testing infrastructure is very slow, and so are feedbacks.

* Unit test

** terraform validate

The most basic test. Does not catch much.

** terraform_validate

- [[https://github.com/elmundio87/terraform_validate][terraform_validate github]]

Python based. Is pretty new and hard to use.
I think I could use it to enforce best practices.

* Resources

- VIDEO: [[https://www.youtube.com/watch?v=hsjgUVhq6KQ][Hashicorp London Meetup - Testing programmable infrastructure, Matt Long]]
- SLIDES:  [[https://www.slideshare.net/opencredo/london-hashicorp-meetup-8-testing-programmable-infrastructure-by-matt-long][https://www.slideshare.net/opencredo/london-hashicorp-meetup-8-testing-programmable-infrastructure-by-matt-long]]
- VIDEO: [[https://www.youtube.com/watch?v=1Kj3I4PZXdE][DevOpsDays Chicago 2016 - Untangling Infrastructure Code... by Nell Shamrell-Harrington ]]
- [[https://www.youtube.com/watch?v=RldRDryLiXs][Youtube - Terraform At Scale]]  17 Sep 2016
