AWS Certificate Manager (ACM)
|| Last update: 7 Mar 2019

* Intro

- [[https://docs.aws.amazon.com/acm/latest/userguide/acm-overview.html]]
- [[https://aws.amazon.com/certificate-manager/faqs/]]

* SSL certs for CloudFront

- [[https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cnames-and-https-requirements.html]]

By the way CloudFormation has supported ACM since August 2016.
But we couldn't use it because the only validation it supported was via email
rather than DNS. At some point in the last year, they've added DNS validation
support - I don't know exactly when - and so now I believe there's no impediment
to using it.

CloudFront has a restriction on where the SSL certs needs to reside in ACM.
The certificate *NEEDS* to be requested in us-east-1.

    If you want to require HTTPS between viewers and CloudFront, you must change
    the AWS region to US East (N. Virginia) in the AWS Certificate Manager console
    before you request or import a certificate.
    Source: https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/cnames-and-https-requirements.html

    The reason for this is that CloudFront, unlike most AWS services, where the
    regional implementation of the service is independent of all other regions,
    has all of its provisioning/administrative infrastructure based in us-east-1.
    Source: https://stackoverflow.com/questions/37289994/aws-certificate-manager-do-regions-matter

* SSL certs and multi-region environments

CloudFormation stack cannot create a resource in a different region.
So if you need a cert to be used from CF and for example and ALB in eu, you need
the stack to be in us-east-1 to request the certificate there and in EU too.
Create it twice.

    Q: Can I use the same ACM certificate in more than one AWS Region?
    It depends on whether youâ€™re using Elastic Load Balancing or Amazon
    CloudFront. To use a certificate with Elastic Load Balancing for the same
    site (the same fully qualified domain name, or FQDN, or set of FQDNs) in a
    different Region, you must request a new certificate for each Region in
    which you plan to use it. To use an ACM certificate with Amazon CloudFront,
    you must request the certificate in the US East (N. Virginia) region. ACM
    certificates in this region that are associated with a CloudFront
    distribution are distributed to all the geographic locations configured for
    that distribution.
    Source: https://aws.amazon.com/certificate-manager/faqs/

* SSL cert with DNS validation

- [[https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-certificatemanager-certificate.html]]

You can create an ACM certificate with CF using
[[https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-certificatemanager-certificate.html]]
and you can choose both DNS and EMAIL validation mechanism.

However CloudFormation *do*not* allow you to create the connected entry in the
DNS name. There is only one output to the CF resource and is the ARN of the
cert.

People solved this problem by using custom resources in CF. They basically
wrap a lambda around a new CF entity and in the lambda the use the sdk to query
ACM and get the CNAME.

- [[https://binx.io/blog/2018/10/05/automated-provisioning-of-acm-certificates-using-route53-in-cloudformation/]] - Oct 2019
- [[https://github.com/binxio/cfn-certificate-provider]]

You can get the list with the CLI:

- [[https://docs.aws.amazon.com/cli/latest/reference/acm/describe-certificate.html#output]]

We opened a support ticket with AWS and they confirmed that you can't do all
the process in CF and you will need to used something else (like a custom
resource + lambda).

    Your understanding of the issue is spot on and at the moment this is a
    limitation with CloudFormation where it does not provide a method for
    automated validation of ACM Certificates. As per the service team, the
    reason behind this is due to the fact that the action of validating a
    certificate is not provided as an API Operation by ACM at this time. When an
    API Operation is available to perform the certificate validation,
    CloudFormation will be adopting this as part of the service.
    Source: AWS support - March 2019

With Terraform you can use
[[https://www.terraform.io/docs/providers/aws/r/acm_certificate_validation.html][aws_acm_certificate_validation]]
resource to solve it.

** ISSUES with CF

* Importing SSL certificates on ACM

Since Oct 13, 2016 you don't need to upload SSL certs for CF and ELBs on IAM, but
you can use ACM directly.

- [[https://forums.aws.amazon.com/ann.jspa?annID=4085][Forum notification]]
- [[https://docs.aws.amazon.com/acm/latest/userguide/import-certificate.html][Docs]]

NOTE: I would not advice to do this in terraform since you need all the data
(key, etc).

** New way

    $ aws acm import-certificate \
      --certificate file://cloudfront_star_test_co_uk_jan_2017.crt \
      --certificate-chain file://abcd.crt \
      --private-key file://cloudfront_star_test_co_uk_jan_2017.pem
    {
      "CertificateArn": "arn:aws:acm:us-east-1:xxx:certificate/xxx"
    }

** Old way (OBSOLETE)

You need to push it twice. Once for the ELBs:

    $ aws iam upload-server-certificate \
      --server-certificate-name cloudfront_star_test_co_uk_april_2016 \
      --certificate-body file://abcd.crt \
      --private-key file://cloudfront_star_test_co_uk_april_2016.key \
      --certificate-chain file://gd_bundle-g2-g1.crt

And one for Cloudfront (with PATH):

    $ aws iam upload-server-certificate \
      --server-certificate-name cloudfront_star_test_co_uk_april_2016 \
      --certificate-body file://abcd.crt \
      --private-key file://cloudfront_star_test_co_uk_april_2016.key \
      --certificate-chain file://gd_bundle-g2-g1.crt \
      --path /cloudfront/cloudfront_star_test_co_uk_april_2016/

- [[https://docs.aws.amazon.com/IAM/latest/UserGuide/id_credentials_server-certs.html#list-server-certificates]]

* API

To get the list of SSL certs run:

    aws acm list-certificates

Example of reply at the time of this doc:

    {
        "CertificateSummaryList": [
            {
                "CertificateArn": "arn:aws:acm:us-east-1:12345:certificate/abcd",
                "DomainName": "staging.test.co.uk"
            },
            {
                "CertificateArn": "arn:aws:acm:us-east-1:12345:certificate/abcd",
                "DomainName": "qa.test.co.uk"
            },
            {
                "CertificateArn": "arn:aws:acm:us-east-1:12345:certificate/abcd",
                "DomainName": "production.test.co.uk"
            },
            {
                "CertificateArn": "arn:aws:acm:us-east-1:12345:certificate/abcd",
                "DomainName": "internal.test.co.uk"
            },
            {
                "CertificateArn": "arn:aws:acm:us-east-1:12345:certificate/abcd",
                "DomainName": "development.test.co.uk"
            }
        ]
    }

** Request a cert

    > aws acm request-certificate --domain-name staging.test.co.uk
    {
        "CertificateArn": "arn:aws:acm:us-east-1:12345:certificate/abcd"
    }

    > aws acm request-certificate --domain-name qa.test.co.uk
    {
        "CertificateArn": "arn:aws:acm:us-east-1:12345:certificate/abcd"
    }

    > aws acm request-certificate --domain-name production.test.co.uk
    {
        "CertificateArn": "arn:aws:acm:us-east-1:12345:certificate/abcd"
    }

    > aws acm request-certificate --domain-name internal.test.co.uk
    {
        "CertificateArn": "arn:aws:acm:us-east-1:12345:certificate/abcd"
    }

    > aws acm request-certificate --domain-name development.test.co.uk
    {
        "CertificateArn": "arn:aws:acm:us-east-1:12345:certificate/abcd"
    }

** Describe a cert

NOTE: You need to have the cert arn!

    aws acm describe-certificate --certificate-arn "arn:aws:acm:us-east-1:12345:certificate/abcd"
    {
        "Certificate": {
            "CertificateArn": "arn:aws:acm:us-east-1:12345:certificate/abcd",
            "Status": "PENDING_VALIDATION",
            "SubjectAlternativeNames": [
                "staging.test.co.uk"
            ],
            "DomainName": "staging.test.co.uk",
            "InUseBy": [],
            "DomainValidationOptions": [
                {
                    "ValidationEmails": [
                        "hostmaster@staging.test.co.uk",
                        "postmaster@staging.test.co.uk",
                        "administrator@staging.test.co.uk",
                        "admin@staging.test.co.uk",
                        "webmaster@staging.test.co.uk"
                    ],
                    "ValidationDomain": "staging.test.co.uk",
                    "DomainName": "staging.test.co.uk"
                }
            ],
            "KeyAlgorithm": "RSA-2048",
            "SignatureAlgorithm": "SHA256WITHRSA",
            "CreatedAt": 1470143570.0,
            "Subject": "CN=staging.test.co.uk"
        }
    }

** Delete cert

    aws acm delete-certificate --certificate-arn 'arn:aws:acm:us-east-1:12345:certificate/abcd'
