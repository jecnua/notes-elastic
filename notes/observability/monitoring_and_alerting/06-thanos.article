Thanos
|| Last update: 26 Jul 2019

* Intro

- [[https://thanos.io/]]
- [[https://github.com/thanos-io/thanos]]
- [[https://improbable.io/blog/thanos-prometheus-at-scale]]

Created at improbable is a way to extend prometheus and have long term storage
in s3.

- [[https://thanos.io/getting-started.md/]]

Have:

- Sidecar: connects to Prometheus and exposes it for real time queries by the Query Gateway and/or upload its data to cloud storage for longer term usage
- Query Gateway: implements Prometheus API to aggregate data from the underlying components (such as Sidecar or Store Gateway)
- Store Gateway: exposes the content of a cloud storage
- Compactor: compacts and down-samples data stored in cloud storage
- Receiver: receives data from Prometheus remote-write WAL, exposes it and/or upload it to cloud storage
- Ruler: evaluates recording and alerting rules against data in Thanos for exposition and/or upload

** Global query view

    Prometheus encourages a functional sharding approach. Even single Prometheus
    server provides enough scalability to free users from the complexity of
    horizontal sharding in virtually all use cases.
    Source: https://improbable.io/blog/thanos-prometheus-at-scale

    With Thanos, on the other hand, you can query and aggregate data from
    multiple Prometheus servers, because all of them are available from a single
    endpoint.
    Source: https://improbable.io/blog/thanos-prometheus-at-scale

You can run more than one query node (one per cluster??) not to have a POF.

* Historical data

    Prometheus 2.0 helps a lot in this area, as a total number of time series no
    longer impact overall server performance (See Fabian’s KubeCon keynote about
    Prometheus 2). Still, Prometheus stores metric data to its local disk. While
    highly-efficient data compression can get significant mileage out of a local
    SSD, there is ultimately a limit on how much historical data can be stored.
    Source: https://improbable.io/blog/thanos-prometheus-at-scale

* Downsampling

    The usual solution to that problem is called downsampling, a process of
    reducing the sampling rate of the signal. With downsampled data, we can
    “zoom out” to a larger time range and maintain the same number of samples,
    thus keeping queries responsive.
    Downsampling old data is an inevitable requirement of any long-term storage
    solution and is beyond the scope of vanilla Prometheus.
    Source: https://improbable.io/blog/thanos-prometheus-at-scale

* Architecture

- [[https://fosdem.org/2019/schedule/event/thanos_transforming_prometheus_to_a_global_scale_in_a_seven_simple_steps/]] - 3 Feb 2019

Thanos uses a system of sidecars. Sidecars are added a each prometheus node and
allow to communicate.

*NOTE*: The gossip protocol has been
[[https://thanos.io/proposals/201809_gossip-removal.md/][deprecated]] in 0.5.0!

The sidecar watch for new files being created by prometheus (all metrics in a
time-range) and upload in a storage system like s3.
You can then, optionally, reduce the retention of the prometheus node and keep
it light (basically becoming a scraper).

Part of the cluster is the *store*, a component that will read the data
from s3 and cache it. it exposes a store API and is treated like any other
sidecar.

    Store Gateway knows how to deal with the data format of the Prometheus storage
    engine. Through smart query planning and by only caching the necessary index
    parts of blocks, it can reduce complex queries to a minimal amount of HTTP
    range requests against files in the object storage. This way it can reduce
    the number of naive requests by four to six orders of magnitude and achieve
    response times that are, in the big picture, hard to distinguish from queries
    against data on a local SSD.
    Source: https://improbable.io/blog/thanos-prometheus-at-scale

Another component is the compactor, that will take the data from s3, compact it
(also doing downsampling) and push it to s3. It allows better performance.
This job can run as a cron. It is not necessary. This decrease latency.

    To produce downsampled data, the Compactor continuously aggregates series
    down to five minute and one hour resolutions. For each raw chunk, encoded
    with TSDB’s XOR compression, it stores different types of aggregations, e.g.
    min, max, or sum in a single block. This allows Querier to automatically
    choose the aggregate that is appropriate for a given PromQL query.
    Source: https://improbable.io/blog/thanos-prometheus-at-scale

* Components

** Thanos sidecar

- [[https://github.com/thanos-io/thanos/blob/master/docs/components/sidecar.md]]

    runs alongside each Prometheus container that together form a cluster.
    Instead of querying directly to the Prometheus (this is the official plural
    according to Prometheus) you query the Thanos Query component.
    Source: https://medium.com/uswitch-labs/making-prometheus-more-awesome-with-thanos-fbec8c6c28ad

You need to add a sidecar to each prometheus
you are adding a separate gprc service called store API on each sidecar
it is for matching the data
it access the Prometheus directly for local data
add a label to Prometheus called

    thanos-store-api=true

special service that will gather all the store api
a service that expose storeapi under same domain

add some flags to allow variable substitution and another container.

THANOS 0.3.0

now you can do rolling update because is sae

we need to mae sure all metrics are unique
so:

    external_labels:
      replica: ${POD_NAME} # new

also alerting you need to remove uniqueness
to allow to alert manager to decouple alert

alert relabel configs
regex replica
action labeldrop

SPACE

you can add here the config to use the bucket.
You need to DISABLE the compaction when you use an external bucket because
you will have an external compaction.

thanos sidecar synchs all xx
prometheus generate a file every two hours
and it will synch every two hours

** Gateway

to access object in the object storage
you need a thanos gateway

expose store api
and need access to the storage

** Thanos compactor

does not expose any api
works on only one thing
and also downsampled

** Querier

querier is stateless

then you need to add the Querierusing the store api
you need to add a special servuce to select the label we added before
this app will be set to discover local store with the dnssrv
and then take some remote store via IP and PORT

queries have the decuplication button to not show all labels
in new one version 0.3.0 the added the stores page in which the show all the
stores they have access to. they have a min and max time

thanos ueries have the same api as prometheus

** Thanos ruler

metamonitoring is important
monitor your monitoring

** Service discovery

- [[https://thanos.io/service-discovery.md/]]

*NOTE*: The gossip protocol has been
[[https://thanos.io/proposals/201809_gossip-removal.md/][deprecated]] in
[[https://github.com/thanos-io/thanos/releases/tag/v0.5.0][0.5.0]]!

Three options are now available:

- Static Flags
- [[https://thanos.io/service-discovery.md/#file-service-discovery][File SD]]
- [[https://thanos.io/service-discovery.md/#dns-service-discovery][DNS SD]]

* Helm chart

There are three chart of interest to manage prometheus with thanos:

- [[https://github.com/helm/charts/tree/master/stable/prometheus-operator]]
- [[https://github.com/coreos/prometheus-operator]] - DON'T USE
- [[https://github.com/coreos/kube-prometheus]] - ???

The correct prometheus operator chart to use it the one in charts/stable and
not the one on the coreos github account. The stable one is based on the one
from coreos.

** Prometheus integration

- [[https://github.com/helm/charts/tree/master/stable/prometheus-operator]]

The official Prometheus chart support installing Thanos sidecar.

** Thanos elements

- [[https://github.com/arthur-c/thanos-helm-chart]]

UNOFFICIAL

* Possible ISSUES

- [[https://github.com/thanos-io/thanos/issues/631]]

* Alternatives

- [[https://github.com/cortexproject/cortex]]

* Re/Sources

- [[https://medium.com/uswitch-labs/making-prometheus-more-awesome-with-thanos-fbec8c6c28ad]] - 21 Nov 2018
- [[https://github.com/AICoE/prometheus-anomaly-detector]]
